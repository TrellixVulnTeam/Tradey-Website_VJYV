{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{nGaW:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"KEYBOARD_DID_CLOSE\",function(){return o}),n.d(t,\"KEYBOARD_DID_OPEN\",function(){return i}),n.d(t,\"copyVisualViewport\",function(){return l}),n.d(t,\"keyboardDidClose\",function(){return b}),n.d(t,\"keyboardDidOpen\",function(){return p}),n.d(t,\"keyboardDidResize\",function(){return w}),n.d(t,\"resetKeyboardAssist\",function(){return a}),n.d(t,\"setKeyboardClose\",function(){return f}),n.d(t,\"setKeyboardOpen\",function(){return c}),n.d(t,\"startKeyboardAssist\",function(){return u}),n.d(t,\"trackViewportChanges\",function(){return D});const i=\"ionKeyboardDidShow\",o=\"ionKeyboardDidHide\";let r={},d={},s=!1;const a=()=>{r={},d={},s=!1},u=e=>{h(e),e.visualViewport&&(d=l(e.visualViewport),e.visualViewport.onresize=()=>{D(e),p()||w(e)?c(e):b(e)&&f(e)})},h=e=>{e.addEventListener(\"keyboardDidShow\",t=>c(e,t)),e.addEventListener(\"keyboardDidHide\",()=>f(e))},c=(e,t)=>{g(e,t),s=!0},f=e=>{y(e),s=!1},p=()=>!s&&r.width===d.width&&(r.height-d.height)*d.scale>150,w=e=>s&&!b(e),b=e=>s&&d.height===e.innerHeight,g=(e,t)=>{const n=new CustomEvent(i,{detail:{keyboardHeight:t?t.keyboardHeight:e.innerHeight-d.height}});e.dispatchEvent(n)},y=e=>{const t=new CustomEvent(o);e.dispatchEvent(t)},D=e=>{r=Object.assign({},d),d=l(e.visualViewport)},l=e=>({width:Math.round(e.width),height:Math.round(e.height),offsetTop:e.offsetTop,offsetLeft:e.offsetLeft,pageTop:e.pageTop,pageLeft:e.pageLeft,scale:e.scale})}}]);","name":"59.9830ab134dd97c66df6f.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[59],{\n\n/***/ \"nGaW\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KEYBOARD_DID_CLOSE\", function() { return KEYBOARD_DID_CLOSE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KEYBOARD_DID_OPEN\", function() { return KEYBOARD_DID_OPEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copyVisualViewport\", function() { return copyVisualViewport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keyboardDidClose\", function() { return keyboardDidClose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keyboardDidOpen\", function() { return keyboardDidOpen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keyboardDidResize\", function() { return keyboardDidResize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resetKeyboardAssist\", function() { return resetKeyboardAssist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setKeyboardClose\", function() { return setKeyboardClose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setKeyboardOpen\", function() { return setKeyboardOpen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startKeyboardAssist\", function() { return startKeyboardAssist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trackViewportChanges\", function() { return trackViewportChanges; });\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nconst KEYBOARD_THRESHOLD = 150;\r\nlet previousVisualViewport = {};\r\nlet currentVisualViewport = {};\r\nlet keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nconst resetKeyboardAssist = () => {\r\n  previousVisualViewport = {};\r\n  currentVisualViewport = {};\r\n  keyboardOpen = false;\r\n};\r\nconst startKeyboardAssist = (win) => {\r\n  startNativeListeners(win);\r\n  if (!win.visualViewport) {\r\n    return;\r\n  }\r\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n  win.visualViewport.onresize = () => {\r\n    trackViewportChanges(win);\r\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n      setKeyboardOpen(win);\r\n    }\r\n    else if (keyboardDidClose(win)) {\r\n      setKeyboardClose(win);\r\n    }\r\n  };\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nconst startNativeListeners = (win) => {\r\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\r\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\r\n};\r\nconst setKeyboardOpen = (win, ev) => {\r\n  fireKeyboardOpenEvent(win, ev);\r\n  keyboardOpen = true;\r\n};\r\nconst setKeyboardClose = (win) => {\r\n  fireKeyboardCloseEvent(win);\r\n  keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nconst keyboardDidOpen = () => {\r\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n  return (!keyboardOpen &&\r\n    previousVisualViewport.width === currentVisualViewport.width &&\r\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nconst keyboardDidResize = (win) => {\r\n  return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nconst keyboardDidClose = (win) => {\r\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\r\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n    detail: { keyboardHeight }\r\n  });\r\n  win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nconst fireKeyboardCloseEvent = (win) => {\r\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n  win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nconst trackViewportChanges = (win) => {\r\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nconst copyVisualViewport = (visualViewport) => {\r\n  return {\r\n    width: Math.round(visualViewport.width),\r\n    height: Math.round(visualViewport.height),\r\n    offsetTop: visualViewport.offsetTop,\r\n    offsetLeft: visualViewport.offsetLeft,\r\n    pageTop: visualViewport.pageTop,\r\n    pageLeft: visualViewport.pageLeft,\r\n    scale: visualViewport.scale\r\n  };\r\n};\r\n\r\n\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}