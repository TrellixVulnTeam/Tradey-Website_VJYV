{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{vuQK:function(t,e,n){\"use strict\";n.r(e),n.d(e,\"SearchPageModule\",function(){return _});var o=n(\"ofXK\"),c=n(\"3Pt+\"),r=n(\"d2mR\"),i=n(\"TEn/\"),s=n(\"fXoL\");let a=(()=>{class t{transform(e,n){return n&&e?t.filter(e,n):e}static filter(t,e){const n=e.toLowerCase();function o(t,e){for(let c in t)if(null!==t[c]&&null!=t[c]){if(\"object\"==typeof t[c]&&o(t[c],e))return!0;if(t[c].toString().toLowerCase().includes(n))return!0}return!1}return t.filter(function(t){return o(t,e)})}}return t.\\u0275fac=function(e){return new(e||t)},t.\\u0275pipe=s.Lb({name:\"filter\",type:t,pure:!1}),t.\\u0275prov=s.Ib({token:t,factory:t.\\u0275fac}),t})(),b=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)}}),t})();var l=n(\"tyNb\"),u=n(\"mrSG\"),p=n(\"poxI\"),h=n(\"tk/3\"),f=n(\"hZP9\"),d=n(\"hrlM\");function m(t,e){if(1&t&&(s.Pb(0,\"p\",18),s.mc(1),s.Ob()),2&t){const t=s.Zb().$implicit;s.Cb(1),s.oc(\"\",t.changePercent,\"%\")}}function g(t,e){if(1&t&&(s.Pb(0,\"p\",19),s.mc(1),s.Ob()),2&t){const t=s.Zb().$implicit;s.Cb(1),s.oc(\"$\",t.change,\"\")}}function O(t,e){if(1&t&&(s.Pb(0,\"p\",20),s.mc(1),s.Ob()),2&t){const t=s.Zb().$implicit;s.Cb(1),s.oc(\"\",t.changePercent,\"%\")}}function P(t,e){if(1&t&&(s.Pb(0,\"p\",21),s.mc(1),s.Ob()),2&t){const t=s.Zb().$implicit;s.Cb(1),s.oc(\"-$\",t.change,\"\")}}function y(t,e){if(1&t){const t=s.Qb();s.Pb(0,\"div\",2),s.Pb(1,\"p\",3),s.mc(2),s.Ob(),s.Pb(3,\"p\",4),s.mc(4),s.Ob(),s.Pb(5,\"p\",5),s.mc(6),s.Ob(),s.Pb(7,\"p\",6),s.mc(8),s.Ob(),s.Pb(9,\"p\",7),s.mc(10),s.Ob(),s.Pb(11,\"p\",8),s.mc(12),s.Ob(),s.Pb(13,\"p\",9),s.mc(14),s.Ob(),s.lc(15,m,2,1,\"p\",14),s.lc(16,g,2,1,\"p\",15),s.lc(17,O,2,1,\"p\",16),s.lc(18,P,2,1,\"p\",17),s.Pb(19,\"p\"),s.Pb(20,\"ion-button\",13),s.Xb(\"click\",function(){s.hc(t);const n=e.$implicit;return s.Zb().presentModal(n.symbol)}),s.mc(21,\"BUY\"),s.Ob(),s.Ob(),s.Pb(22,\"p\"),s.Pb(23,\"ion-button\",13),s.Xb(\"click\",function(){s.hc(t);const n=e.$implicit;return s.Zb().addToWatchlist(n.symbol)}),s.mc(24,\"ADD TO WATCHLIST\"),s.Ob(),s.Ob(),s.Ob()}if(2&t){const t=e.$implicit;s.Cb(2),s.nc(t.symbol),s.Cb(2),s.nc(t.companyName),s.Cb(2),s.oc(\"$\",t.price,\"\"),s.Cb(2),s.oc(\"$\",t.open,\"\"),s.Cb(2),s.oc(\"$\",t.high,\"\"),s.Cb(2),s.oc(\"$\",t.low,\"\"),s.Cb(2),s.oc(\"$\",t.previousClose,\"\"),s.Cb(1),s.ec(\"ngIf\",1==t.color),s.Cb(1),s.ec(\"ngIf\",1==t.color),s.Cb(1),s.ec(\"ngIf\",0==t.color),s.Cb(1),s.ec(\"ngIf\",0==t.color)}}const C=[{path:\"\",component:(()=>{class t{constructor(t,e,n,o){this.http=t,this.userAuth=e,this.toastController=n,this.modalController=o,this.data=[],this.offset=0,this.searchInput=\"\"}ngOnInit(){this.initializeItems(),this.userAuth.userObservable.subscribe(t=>{this.user=t})}changeSearchQuery(){this.data=[],this.offset=0,this.initializeItems()}initializeItems(){return Object(u.b)(this,void 0,void 0,function*(){this.http.get(\"http://192.53.121.88:5000/getStocks?offset=\"+this.offset+\"&searchValue=\"+this.searchInput).subscribe(t=>{this.data=this.data.concat(t.data),console.log(this.data)})})}loadMore(){this.offset=this.offset+20,this.initializeItems()}addToWatchlist(t){this.userAuth.userObservable.subscribe(e=>{this.user=e;let n=\"http://192.53.121.88:5000/addToWatchlist?userID=\"+this.user.email+\"&symbol=\"+t;console.log(n),console.log(\"adding\"+t+\"to\"+this.user.email),this.http.get(n).subscribe(e=>{console.log(\"brought message back from server.\",e.data),\"notAdded\"==e.data?this.presentToast(t+\" is already in your watchlist.\",\"danger\"):this.presentToast(\"Added \"+t+\" to your watchlist.\",\"success\")})})}presentToast(t,e){return Object(u.b)(this,void 0,void 0,function*(){(yield this.toastController.create({message:t,duration:5e3,color:e})).present()})}presentModal(t){return Object(u.b)(this,void 0,void 0,function*(){const e=yield this.modalController.create({component:p.a,cssClass:\"buy-modal\"});return e.componentProps={modal:e,value:t},yield e.present()})}}return t.\\u0275fac=function(e){return new(e||t)(s.Mb(h.a),s.Mb(f.a),s.Mb(i.j),s.Mb(i.h))},t.\\u0275cmp=s.Gb({type:t,selectors:[[\"app-search\"]],decls:27,vars:6,consts:[[\"placeholder\",\"search\",3,\"ngModel\",\"ngModelChange\",\"ionChange\"],[1,\"container\"],[1,\"row\"],[1,\"symbol\"],[1,\"company-name\"],[1,\"price\"],[1,\"open\"],[1,\"high\"],[1,\"low\"],[1,\"previous-close\"],[1,\"change-percent\"],[1,\"change\"],[\"class\",\"row\",4,\"ngFor\",\"ngForOf\",\"ngForAs\"],[3,\"click\"],[\"class\",\"change-percent\",\"style\",\"color:green;\",4,\"ngIf\"],[\"class\",\"change\",\"style\",\"color:green;\",4,\"ngIf\"],[\"class\",\"change-percent\",\"style\",\"color:red;\",4,\"ngIf\"],[\"class\",\"change\",\"style\",\"color:red;\",4,\"ngIf\"],[1,\"change-percent\",2,\"color\",\"green\"],[1,\"change\",2,\"color\",\"green\"],[1,\"change-percent\",2,\"color\",\"red\"],[1,\"change\",2,\"color\",\"red\"]],template:function(t,e){1&t&&(s.Pb(0,\"ion-content\"),s.Nb(1,\"navbar\"),s.Pb(2,\"ion-input\",0),s.Xb(\"ngModelChange\",function(t){return e.searchInput=t})(\"ionChange\",function(t){return e.changeSearchQuery(t.target.value)}),s.Ob(),s.Pb(3,\"div\",1),s.Pb(4,\"div\",2),s.Pb(5,\"p\",3),s.mc(6,\"Symbol\"),s.Ob(),s.Pb(7,\"p\",4),s.mc(8,\"Company Name\"),s.Ob(),s.Pb(9,\"p\",5),s.mc(10,\"Price\"),s.Ob(),s.Pb(11,\"p\",6),s.mc(12,\"Open\"),s.Ob(),s.Pb(13,\"p\",7),s.mc(14,\"High\"),s.Ob(),s.Pb(15,\"p\",8),s.mc(16,\"Low\"),s.Ob(),s.Pb(17,\"p\",9),s.mc(18,\"Previous Close\"),s.Ob(),s.Pb(19,\"p\",10),s.mc(20,\"Change Percent\"),s.Ob(),s.Pb(21,\"p\",11),s.mc(22,\"Change\"),s.Ob(),s.Ob(),s.lc(23,y,25,11,\"div\",12),s.ac(24,\"filter\"),s.Ob(),s.Pb(25,\"ion-button\",13),s.Xb(\"click\",function(){return e.loadMore()}),s.mc(26,\"Load More\"),s.Ob(),s.Ob()),2&t&&(s.Cb(2),s.ec(\"ngModel\",e.searchInput),s.Cb(21),s.ec(\"ngForOf\",s.bc(24,3,e.data,e.filterTerm))(\"ngForAs\",e.index))},directives:[i.c,d.a,i.d,i.i,c.e,c.f,o.h,i.b,o.i],pipes:[a],styles:[\".searchbar[_ngcontent-%COMP%]{--background:#fff;--color:#000}.company-name[_ngcontent-%COMP%]{width:200px}.row[_ngcontent-%COMP%]{display:flex}.symbol[_ngcontent-%COMP%]{margin-left:2%}.company-name[_ngcontent-%COMP%], .high[_ngcontent-%COMP%], .low[_ngcontent-%COMP%], .open[_ngcontent-%COMP%], .previous-close[_ngcontent-%COMP%], .price[_ngcontent-%COMP%], .symbol[_ngcontent-%COMP%]{width:10%}.change-percent[_ngcontent-%COMP%]{width:7%}.change[_ngcontent-%COMP%]{width:5%}\"]}),t})()}];let w,M=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)},imports:[[l.i.forChild(C)],l.i]}),t})();n(\"XNiG\"),n(\"LRne\"),n(\"HDdC\"),n(\"xgIS\"),n(\"3N8a\"),n(\"IjjT\"),n(\"7Hc7\"),n(\"quSY\"),n(\"/uUt\"),n(\"D0XW\"),n(\"zx2A\"),n(\"Y7HM\"),n(\"z+Ro\"),n(\"pLZG\"),n(\"JX91\"),n(\"Zy1z\"),n(\"eIep\"),n(\"UXun\");try{w=\"undefined\"!=typeof Intl&&Intl.v8BreakIterator}catch(k){w=!1}let v=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)}}),t})(),I=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)}}),t})(),j=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)}}),t})(),$=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)},imports:[[I,v,j],I,j]}),t})(),_=(()=>{class t{}return t.\\u0275mod=s.Kb({type:t}),t.\\u0275inj=s.Jb({factory:function(e){return new(e||t)},imports:[[o.b,c.b,i.f,M,r.a,h.b,b,$]]}),t})()}}]);","name":"65.02d51d4b17b419a150de.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[65],{\n\n/***/ \"vuQK\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"SearchPageModule\", function() { return /* binding */ search_module_SearchPageModule; });\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js\nvar common = __webpack_require__(\"ofXK\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js + 1 modules\nvar fesm2015_forms = __webpack_require__(\"3Pt+\");\n\n// EXTERNAL MODULE: ./src/app/shared.module.ts\nvar shared_module = __webpack_require__(\"d2mR\");\n\n// EXTERNAL MODULE: ./node_modules/@ionic/angular/__ivy_ngcc__/fesm2015/ionic-angular.js + 6 modules\nvar ionic_angular = __webpack_require__(\"TEn/\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js\nvar core = __webpack_require__(\"fXoL\");\n\n// CONCATENATED MODULE: ./node_modules/ng2-search-filter/__ivy_ngcc__/ng2-search-filter.js\n\n\nlet ng2_search_filter_Ng2SearchPipe = /*@__PURE__*/ (() => {\n    class Ng2SearchPipe {\n        /**\n         * @param {?} items object from array\n         * @param {?} term term's search\n         * @return {?}\n         */\n        transform(items, term) {\n            if (!term || !items)\n                return items;\n            return Ng2SearchPipe.filter(items, term);\n        }\n        /**\n         *\n         * @param {?} items List of items to filter\n         * @param {?} term  a string term to compare with every property of the list\n         *\n         * @return {?}\n         */\n        static filter(items, term) {\n            const /** @type {?} */ toCompare = term.toLowerCase();\n            /**\n             * @param {?} item\n             * @param {?} term\n             * @return {?}\n             */\n            function checkInside(item, term) {\n                for (let /** @type {?} */ property in item) {\n                    if (item[property] === null || item[property] == undefined) {\n                        continue;\n                    }\n                    if (typeof item[property] === 'object') {\n                        if (checkInside(item[property], term)) {\n                            return true;\n                        }\n                    }\n                    if (item[property].toString().toLowerCase().includes(toCompare)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return items.filter(function (item) {\n                return checkInside(item, term);\n            });\n        }\n    }\n    Ng2SearchPipe.ɵfac = function Ng2SearchPipe_Factory(t) { return new (t || Ng2SearchPipe)(); };\n    Ng2SearchPipe.ɵpipe = core[\"Lb\" /* ɵɵdefinePipe */]({ name: \"filter\", type: Ng2SearchPipe, pure: false });\n    Ng2SearchPipe.ɵprov = core[\"Ib\" /* ɵɵdefineInjectable */]({ token: Ng2SearchPipe, factory: Ng2SearchPipe.ɵfac });\n    return Ng2SearchPipe;\n})();\nlet ng2_search_filter_Ng2SearchPipeModule = /*@__PURE__*/ (() => {\n    class Ng2SearchPipeModule {\n    }\n    Ng2SearchPipeModule.ɵmod = core[\"Kb\" /* ɵɵdefineNgModule */]({ type: Ng2SearchPipeModule });\n    Ng2SearchPipeModule.ɵinj = core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function Ng2SearchPipeModule_Factory(t) { return new (t || Ng2SearchPipeModule)(); } });\n    return Ng2SearchPipeModule;\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"jc\" /* ɵɵsetNgModuleScope */](ng2_search_filter_Ng2SearchPipeModule, { declarations: [ng2_search_filter_Ng2SearchPipe], exports: [ng2_search_filter_Ng2SearchPipe] }); })();\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=ng2-search-filter.js.map\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js + 6 modules\nvar router = __webpack_require__(\"tyNb\");\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(\"mrSG\");\n\n// EXTERNAL MODULE: ./src/app/components/modal-buy/modal-buy.component.ts\nvar modal_buy_component = __webpack_require__(\"poxI\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js\nvar http = __webpack_require__(\"tk/3\");\n\n// EXTERNAL MODULE: ./src/app/services/user-auth.service.ts\nvar user_auth_service = __webpack_require__(\"hZP9\");\n\n// EXTERNAL MODULE: ./src/app/components/navbar/navbar.component.ts + 1 modules\nvar navbar_component = __webpack_require__(\"hrlM\");\n\n// CONCATENATED MODULE: ./src/app/pages/search/search.page.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction SearchPage_div_23_p_15_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"Pb\" /* ɵɵelementStart */](0, \"p\", 18);\r\n        core[\"mc\" /* ɵɵtext */](1);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const x_r1 = core[\"Zb\" /* ɵɵnextContext */]().$implicit;\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"\", x_r1.changePercent, \"%\");\r\n    }\r\n}\r\nfunction SearchPage_div_23_p_16_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"Pb\" /* ɵɵelementStart */](0, \"p\", 19);\r\n        core[\"mc\" /* ɵɵtext */](1);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const x_r1 = core[\"Zb\" /* ɵɵnextContext */]().$implicit;\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"$\", x_r1.change, \"\");\r\n    }\r\n}\r\nfunction SearchPage_div_23_p_17_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"Pb\" /* ɵɵelementStart */](0, \"p\", 20);\r\n        core[\"mc\" /* ɵɵtext */](1);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const x_r1 = core[\"Zb\" /* ɵɵnextContext */]().$implicit;\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"\", x_r1.changePercent, \"%\");\r\n    }\r\n}\r\nfunction SearchPage_div_23_p_18_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"Pb\" /* ɵɵelementStart */](0, \"p\", 21);\r\n        core[\"mc\" /* ɵɵtext */](1);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const x_r1 = core[\"Zb\" /* ɵɵnextContext */]().$implicit;\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"-$\", x_r1.change, \"\");\r\n    }\r\n}\r\nfunction SearchPage_div_23_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        const _r12 = core[\"Qb\" /* ɵɵgetCurrentView */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](0, \"div\", 2);\r\n        core[\"Pb\" /* ɵɵelementStart */](1, \"p\", 3);\r\n        core[\"mc\" /* ɵɵtext */](2);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](3, \"p\", 4);\r\n        core[\"mc\" /* ɵɵtext */](4);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](5, \"p\", 5);\r\n        core[\"mc\" /* ɵɵtext */](6);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](7, \"p\", 6);\r\n        core[\"mc\" /* ɵɵtext */](8);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](9, \"p\", 7);\r\n        core[\"mc\" /* ɵɵtext */](10);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](11, \"p\", 8);\r\n        core[\"mc\" /* ɵɵtext */](12);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](13, \"p\", 9);\r\n        core[\"mc\" /* ɵɵtext */](14);\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"lc\" /* ɵɵtemplate */](15, SearchPage_div_23_p_15_Template, 2, 1, \"p\", 14);\r\n        core[\"lc\" /* ɵɵtemplate */](16, SearchPage_div_23_p_16_Template, 2, 1, \"p\", 15);\r\n        core[\"lc\" /* ɵɵtemplate */](17, SearchPage_div_23_p_17_Template, 2, 1, \"p\", 16);\r\n        core[\"lc\" /* ɵɵtemplate */](18, SearchPage_div_23_p_18_Template, 2, 1, \"p\", 17);\r\n        core[\"Pb\" /* ɵɵelementStart */](19, \"p\");\r\n        core[\"Pb\" /* ɵɵelementStart */](20, \"ion-button\", 13);\r\n        core[\"Xb\" /* ɵɵlistener */](\"click\", function SearchPage_div_23_Template_ion_button_click_20_listener() { core[\"hc\" /* ɵɵrestoreView */](_r12); const x_r1 = ctx.$implicit; const ctx_r11 = core[\"Zb\" /* ɵɵnextContext */](); return ctx_r11.presentModal(x_r1.symbol); });\r\n        core[\"mc\" /* ɵɵtext */](21, \"BUY\");\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Pb\" /* ɵɵelementStart */](22, \"p\");\r\n        core[\"Pb\" /* ɵɵelementStart */](23, \"ion-button\", 13);\r\n        core[\"Xb\" /* ɵɵlistener */](\"click\", function SearchPage_div_23_Template_ion_button_click_23_listener() { core[\"hc\" /* ɵɵrestoreView */](_r12); const x_r1 = ctx.$implicit; const ctx_r13 = core[\"Zb\" /* ɵɵnextContext */](); return ctx_r13.addToWatchlist(x_r1.symbol); });\r\n        core[\"mc\" /* ɵɵtext */](24, \"ADD TO WATCHLIST\");\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n        core[\"Ob\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const x_r1 = ctx.$implicit;\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"nc\" /* ɵɵtextInterpolate */](x_r1.symbol);\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"nc\" /* ɵɵtextInterpolate */](x_r1.companyName);\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"$\", x_r1.price, \"\");\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"$\", x_r1.open, \"\");\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"$\", x_r1.high, \"\");\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"$\", x_r1.low, \"\");\r\n        core[\"Cb\" /* ɵɵadvance */](2);\r\n        core[\"oc\" /* ɵɵtextInterpolate1 */](\"$\", x_r1.previousClose, \"\");\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"ec\" /* ɵɵproperty */](\"ngIf\", x_r1.color == 1);\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"ec\" /* ɵɵproperty */](\"ngIf\", x_r1.color == 1);\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"ec\" /* ɵɵproperty */](\"ngIf\", x_r1.color == 0);\r\n        core[\"Cb\" /* ɵɵadvance */](1);\r\n        core[\"ec\" /* ɵɵproperty */](\"ngIf\", x_r1.color == 0);\r\n    }\r\n}\r\nlet search_page_SearchPage = /*@__PURE__*/ (() => {\r\n    class SearchPage {\r\n        constructor(http, userAuth, toastController, modalController) {\r\n            this.http = http;\r\n            this.userAuth = userAuth;\r\n            this.toastController = toastController;\r\n            this.modalController = modalController;\r\n            this.data = [];\r\n            this.offset = 0;\r\n            this.searchInput = \"\";\r\n        }\r\n        ngOnInit() {\r\n            // Get a list of all existing stocks\r\n            this.initializeItems();\r\n            this.userAuth.userObservable.subscribe((userData) => {\r\n                // this.email = userData.email;\r\n                this.user = userData;\r\n                // console.log(this.user.data);\r\n            });\r\n        }\r\n        changeSearchQuery() {\r\n            this.data = [];\r\n            this.offset = 0;\r\n            this.initializeItems();\r\n        }\r\n        initializeItems() {\r\n            return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function* () {\r\n                this.http.get(\"http://192.53.121.88:5000/getStocks?offset=\" + this.offset + \"&searchValue=\" + this.searchInput).subscribe(datas => {\r\n                    //       SELECT * FROM stocks\r\n                    // WHERE column LIKE '%apple%'\r\n                    this.data = this.data.concat(datas[\"data\"]);\r\n                    console.log(this.data);\r\n                });\r\n            });\r\n        }\r\n        loadMore() {\r\n            this.offset = this.offset + 20;\r\n            this.initializeItems();\r\n        }\r\n        addToWatchlist(symbol) {\r\n            this.userAuth.userObservable.subscribe((userData) => {\r\n                this.user = userData;\r\n                let url = \"http://192.53.121.88:5000/addToWatchlist?userID=\" + this.user.email + \"&symbol=\" + symbol;\r\n                console.log(url);\r\n                console.log(\"adding\" + symbol + \"to\" + this.user.email);\r\n                this.http.get(url).subscribe(result => {\r\n                    console.log(\"brought message back from server.\", result['data']);\r\n                    if (result['data'] == \"notAdded\") {\r\n                        this.presentToast(symbol + \" is already in your watchlist.\", \"danger\");\r\n                    }\r\n                    else {\r\n                        this.presentToast(\"Added \" + symbol + \" to your watchlist.\", \"success\");\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        presentToast(myMessage, myColor) {\r\n            return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function* () {\r\n                const toast = yield this.toastController.create({\r\n                    message: myMessage,\r\n                    duration: 5000,\r\n                    color: myColor\r\n                });\r\n                toast.present();\r\n            });\r\n        }\r\n        presentModal(symbol) {\r\n            return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function* () {\r\n                const modal = yield this.modalController.create({\r\n                    component: modal_buy_component[\"a\" /* ModalBuyComponent */],\r\n                    cssClass: 'buy-modal',\r\n                });\r\n                modal.componentProps = {\r\n                    modal: modal,\r\n                    value: symbol,\r\n                };\r\n                return yield modal.present();\r\n            });\r\n        }\r\n    }\r\n    SearchPage.ɵfac = function SearchPage_Factory(t) { return new (t || SearchPage)(core[\"Mb\" /* ɵɵdirectiveInject */](http[\"a\" /* HttpClient */]), core[\"Mb\" /* ɵɵdirectiveInject */](user_auth_service[\"a\" /* UserAuthService */]), core[\"Mb\" /* ɵɵdirectiveInject */](ionic_angular[\"j\" /* ToastController */]), core[\"Mb\" /* ɵɵdirectiveInject */](ionic_angular[\"h\" /* ModalController */])); };\r\n    SearchPage.ɵcmp = core[\"Gb\" /* ɵɵdefineComponent */]({ type: SearchPage, selectors: [[\"app-search\"]], decls: 27, vars: 6, consts: [[\"placeholder\", \"search\", 3, \"ngModel\", \"ngModelChange\", \"ionChange\"], [1, \"container\"], [1, \"row\"], [1, \"symbol\"], [1, \"company-name\"], [1, \"price\"], [1, \"open\"], [1, \"high\"], [1, \"low\"], [1, \"previous-close\"], [1, \"change-percent\"], [1, \"change\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\", \"ngForAs\"], [3, \"click\"], [\"class\", \"change-percent\", \"style\", \"color:green;\", 4, \"ngIf\"], [\"class\", \"change\", \"style\", \"color:green;\", 4, \"ngIf\"], [\"class\", \"change-percent\", \"style\", \"color:red;\", 4, \"ngIf\"], [\"class\", \"change\", \"style\", \"color:red;\", 4, \"ngIf\"], [1, \"change-percent\", 2, \"color\", \"green\"], [1, \"change\", 2, \"color\", \"green\"], [1, \"change-percent\", 2, \"color\", \"red\"], [1, \"change\", 2, \"color\", \"red\"]], template: function SearchPage_Template(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"Pb\" /* ɵɵelementStart */](0, \"ion-content\");\r\n                core[\"Nb\" /* ɵɵelement */](1, \"navbar\");\r\n                core[\"Pb\" /* ɵɵelementStart */](2, \"ion-input\", 0);\r\n                core[\"Xb\" /* ɵɵlistener */](\"ngModelChange\", function SearchPage_Template_ion_input_ngModelChange_2_listener($event) { return ctx.searchInput = $event; })(\"ionChange\", function SearchPage_Template_ion_input_ionChange_2_listener($event) { return ctx.changeSearchQuery($event.target.value); });\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](3, \"div\", 1);\r\n                core[\"Pb\" /* ɵɵelementStart */](4, \"div\", 2);\r\n                core[\"Pb\" /* ɵɵelementStart */](5, \"p\", 3);\r\n                core[\"mc\" /* ɵɵtext */](6, \"Symbol\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](7, \"p\", 4);\r\n                core[\"mc\" /* ɵɵtext */](8, \"Company Name\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](9, \"p\", 5);\r\n                core[\"mc\" /* ɵɵtext */](10, \"Price\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](11, \"p\", 6);\r\n                core[\"mc\" /* ɵɵtext */](12, \"Open\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](13, \"p\", 7);\r\n                core[\"mc\" /* ɵɵtext */](14, \"High\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](15, \"p\", 8);\r\n                core[\"mc\" /* ɵɵtext */](16, \"Low\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](17, \"p\", 9);\r\n                core[\"mc\" /* ɵɵtext */](18, \"Previous Close\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](19, \"p\", 10);\r\n                core[\"mc\" /* ɵɵtext */](20, \"Change Percent\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](21, \"p\", 11);\r\n                core[\"mc\" /* ɵɵtext */](22, \"Change\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"lc\" /* ɵɵtemplate */](23, SearchPage_div_23_Template, 25, 11, \"div\", 12);\r\n                core[\"ac\" /* ɵɵpipe */](24, \"filter\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Pb\" /* ɵɵelementStart */](25, \"ion-button\", 13);\r\n                core[\"Xb\" /* ɵɵlistener */](\"click\", function SearchPage_Template_ion_button_click_25_listener() { return ctx.loadMore(); });\r\n                core[\"mc\" /* ɵɵtext */](26, \"Load More\");\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n                core[\"Ob\" /* ɵɵelementEnd */]();\r\n            }\r\n            if (rf & 2) {\r\n                core[\"Cb\" /* ɵɵadvance */](2);\r\n                core[\"ec\" /* ɵɵproperty */](\"ngModel\", ctx.searchInput);\r\n                core[\"Cb\" /* ɵɵadvance */](21);\r\n                core[\"ec\" /* ɵɵproperty */](\"ngForOf\", core[\"bc\" /* ɵɵpipeBind2 */](24, 3, ctx.data, ctx.filterTerm))(\"ngForAs\", ctx.index);\r\n            }\r\n        }, directives: [ionic_angular[\"c\" /* IonContent */], navbar_component[\"a\" /* NavbarComponent */], ionic_angular[\"d\" /* IonInput */], ionic_angular[\"i\" /* TextValueAccessor */], fesm2015_forms[\"e\" /* NgControlStatus */], fesm2015_forms[\"f\" /* NgModel */], common[\"h\" /* NgForOf */], ionic_angular[\"b\" /* IonButton */], common[\"i\" /* NgIf */]], pipes: [ng2_search_filter_Ng2SearchPipe], styles: [\".searchbar[_ngcontent-%COMP%]{--background:#fff;--color:#000}.company-name[_ngcontent-%COMP%]{width:200px}.row[_ngcontent-%COMP%]{display:flex}.symbol[_ngcontent-%COMP%]{margin-left:2%}.company-name[_ngcontent-%COMP%], .high[_ngcontent-%COMP%], .low[_ngcontent-%COMP%], .open[_ngcontent-%COMP%], .previous-close[_ngcontent-%COMP%], .price[_ngcontent-%COMP%], .symbol[_ngcontent-%COMP%]{width:10%}.change-percent[_ngcontent-%COMP%]{width:7%}.change[_ngcontent-%COMP%]{width:5%}\"] });\r\n    return SearchPage;\r\n})();\r\n\n// CONCATENATED MODULE: ./src/app/pages/search/search-routing.module.ts\n\r\n\r\n\r\n\r\nconst routes = [\r\n    {\r\n        path: '',\r\n        component: search_page_SearchPage\r\n    }\r\n];\r\nlet search_routing_module_SearchPageRoutingModule = /*@__PURE__*/ (() => {\r\n    class SearchPageRoutingModule {\r\n    }\r\n    SearchPageRoutingModule.ɵmod = core[\"Kb\" /* ɵɵdefineNgModule */]({ type: SearchPageRoutingModule });\r\n    SearchPageRoutingModule.ɵinj = core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function SearchPageRoutingModule_Factory(t) { return new (t || SearchPageRoutingModule)(); }, imports: [[router[\"i\" /* RouterModule */].forChild(routes)], router[\"i\" /* RouterModule */]] });\r\n    return SearchPageRoutingModule;\r\n})();\r\n\n// CONCATENATED MODULE: ./node_modules/@angular/cdk/fesm2015/coercion.js\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof core[\"m\" /* ElementRef */] ? elementOrRef.nativeElement : elementOrRef;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n//# sourceMappingURL=coercion.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subject.js\nvar Subject = __webpack_require__(\"XNiG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/of.js\nvar of = __webpack_require__(\"LRne\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Observable.js + 3 modules\nvar Observable = __webpack_require__(\"HDdC\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js\nvar fromEvent = __webpack_require__(\"xgIS\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js + 1 modules\nvar AsyncAction = __webpack_require__(\"3N8a\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js\n\nclass AnimationFrameAction_AnimationFrameAction extends AsyncAction[\"a\" /* AsyncAction */] {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(() => scheduler.flush(null)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=AnimationFrameAction.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js + 1 modules\nvar AsyncScheduler = __webpack_require__(\"IjjT\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js\n\nclass AnimationFrameScheduler_AnimationFrameScheduler extends AsyncScheduler[\"a\" /* AsyncScheduler */] {\n    flush(action) {\n        this.active = true;\n        this.scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        let count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=AnimationFrameScheduler.js.map\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js\n\n\nconst animationFrameScheduler = /*@__PURE__*/ new AnimationFrameScheduler_AnimationFrameScheduler(AnimationFrameAction_AnimationFrameAction);\nconst animationFrame = animationFrameScheduler;\n//# sourceMappingURL=animationFrame.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/asap.js + 3 modules\nvar asap = __webpack_require__(\"7Hc7\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/Subscription.js + 1 modules\nvar Subscription = __webpack_require__(\"quSY\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/util/isObservable.js\n\nfunction isObservable(obj) {\n    return !!obj && (obj instanceof Observable[\"a\" /* Observable */] || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));\n}\n//# sourceMappingURL=isObservable.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js\nvar distinctUntilChanged = __webpack_require__(\"/uUt\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/scheduler/async.js\nvar scheduler_async = __webpack_require__(\"D0XW\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/innerSubscribe.js\nvar innerSubscribe = __webpack_require__(\"zx2A\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/operators/audit.js\n\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new audit_AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass audit_AuditSubscriber extends innerSubscribe[\"b\" /* SimpleOuterSubscriber */] {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = Object(innerSubscribe[\"c\" /* innerSubscribe */])(duration, new innerSubscribe[\"a\" /* SimpleInnerSubscriber */](this));\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = undefined;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = undefined;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext() {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n//# sourceMappingURL=audit.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/util/isNumeric.js\nvar isNumeric = __webpack_require__(\"Y7HM\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js\nvar isScheduler = __webpack_require__(\"z+Ro\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/observable/timer.js\n\n\n\n\nfunction timer(dueTime = 0, periodOrScheduler, scheduler) {\n    let period = -1;\n    if (Object(isNumeric[\"a\" /* isNumeric */])(periodOrScheduler)) {\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n    }\n    else if (Object(isScheduler[\"a\" /* isScheduler */])(periodOrScheduler)) {\n        scheduler = periodOrScheduler;\n    }\n    if (!Object(isScheduler[\"a\" /* isScheduler */])(scheduler)) {\n        scheduler = scheduler_async[\"a\" /* async */];\n    }\n    return new Observable[\"a\" /* Observable */](subscriber => {\n        const due = Object(isNumeric[\"a\" /* isNumeric */])(dueTime)\n            ? dueTime\n            : (+dueTime - scheduler.now());\n        return scheduler.schedule(dispatch, due, {\n            index: 0, period, subscriber\n        });\n    });\n}\nfunction dispatch(state) {\n    const { index, period, subscriber } = state;\n    subscriber.next(index);\n    if (subscriber.closed) {\n        return;\n    }\n    else if (period === -1) {\n        return subscriber.complete();\n    }\n    state.index = index + 1;\n    this.schedule(state, period);\n}\n//# sourceMappingURL=timer.js.map\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/operators/auditTime.js\n\n\n\nfunction auditTime(duration, scheduler = scheduler_async[\"a\" /* async */]) {\n    return audit(() => timer(duration, scheduler));\n}\n//# sourceMappingURL=auditTime.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/filter.js\nvar filter = __webpack_require__(\"pLZG\");\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js\n\nfunction takeUntil(notifier) {\n    return (source) => source.lift(new takeUntil_TakeUntilOperator(notifier));\n}\nclass takeUntil_TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new takeUntil_TakeUntilSubscriber(subscriber);\n        const notifierSubscription = Object(innerSubscribe[\"c\" /* innerSubscribe */])(this.notifier, new innerSubscribe[\"a\" /* SimpleInnerSubscriber */](takeUntilSubscriber));\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass takeUntil_TakeUntilSubscriber extends innerSubscribe[\"b\" /* SimpleOuterSubscriber */] {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext() {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n//# sourceMappingURL=takeUntil.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/startWith.js\nvar startWith = __webpack_require__(\"JX91\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/pairwise.js\nvar pairwise = __webpack_require__(\"Zy1z\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js\nvar switchMap = __webpack_require__(\"eIep\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js + 1 modules\nvar shareReplay = __webpack_require__(\"UXun\");\n\n// CONCATENATED MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/platform.js\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\nlet platform_Platform = /*@__PURE__*/ (() => {\n    class Platform {\n        constructor(_platformId) {\n            this._platformId = _platformId;\n            // We want to use the Angular platform check because if the Document is shimmed\n            // without the navigator, the following checks will fail. This is preferred because\n            // sometimes the Document may be shimmed without the user's knowledge or intention\n            /** Whether the Angular application is being rendered in the browser. */\n            this.isBrowser = this._platformId ?\n                Object(common[\"m\" /* isPlatformBrowser */])(this._platformId) : typeof document === 'object' && !!document;\n            /** Whether the current browser is Microsoft Edge. */\n            this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n            /** Whether the current rendering engine is Microsoft Trident. */\n            this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n            // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n            /** Whether the current rendering engine is Blink. */\n            this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n                typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n            // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n            // ensure that Webkit runs standalone and is not used as another engine's base.\n            /** Whether the current rendering engine is WebKit. */\n            this.WEBKIT = this.isBrowser &&\n                /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n            /** Whether the current platform is Apple iOS. */\n            this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n                !('MSStream' in window);\n            // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n            // them self as Gecko-like browsers and modify the userAgent's according to that.\n            // Since we only cover one explicit Firefox case, we can simply check for Firefox\n            // instead of having an unstable check for Gecko.\n            /** Whether the current browser is Firefox. */\n            this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n            /** Whether the current platform is Android. */\n            // Trident on mobile adds the android platform to the userAgent to trick detections.\n            this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n            // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n            // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n            // Safari browser should also use Webkit as its layout engine.\n            /** Whether the current browser is Safari. */\n            this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n        }\n    }\n    Platform.ɵfac = function Platform_Factory(t) { return new (t || Platform)(core[\"Tb\" /* ɵɵinject */](core[\"D\" /* PLATFORM_ID */])); };\n    Platform.ɵprov = /*@__PURE__*/ Object(core[\"Ib\" /* ɵɵdefineInjectable */])({ factory: function Platform_Factory() { return new Platform(Object(core[\"Tb\" /* ɵɵinject */])(core[\"D\" /* PLATFORM_ID */])); }, token: Platform, providedIn: \"root\" });\n    return Platform;\n})();\nlet platform_PlatformModule = /*@__PURE__*/ (() => {\n    class PlatformModule {\n    }\n    PlatformModule.ɵmod = /*@__PURE__*/ core[\"Kb\" /* ɵɵdefineNgModule */]({ type: PlatformModule });\n    PlatformModule.ɵinj = /*@__PURE__*/ core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function PlatformModule_Factory(t) { return new (t || PlatformModule)(); } });\n    return PlatformModule;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => supportsPassiveEvents = true\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\n        }\n        scrollContainer.parentNode.removeChild(scrollContainer);\n    }\n    return rtlScrollAxisType;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=platform.js.map\n\n// CONCATENATED MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\n\nconst DIR_DOCUMENT = /*@__PURE__*/ new core[\"s\" /* InjectionToken */]('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return Object(core[\"W\" /* inject */])(common[\"c\" /* DOCUMENT */]);\n}\nlet bidi_Directionality = /*@__PURE__*/ (() => {\n    class Directionality {\n        constructor(_document) {\n            /** The current 'ltr' or 'rtl' value. */\n            this.value = 'ltr';\n            /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n            this.change = new core[\"o\" /* EventEmitter */]();\n            if (_document) {\n                // TODO: handle 'auto' value -\n                // We still need to account for dir=\"auto\".\n                // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n                // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n                const bodyDir = _document.body ? _document.body.dir : null;\n                const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n                const value = bodyDir || htmlDir;\n                this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n            }\n        }\n        ngOnDestroy() {\n            this.change.complete();\n        }\n    }\n    Directionality.ɵfac = function Directionality_Factory(t) { return new (t || Directionality)(core[\"Tb\" /* ɵɵinject */](DIR_DOCUMENT, 8)); };\n    Directionality.ɵprov = /*@__PURE__*/ Object(core[\"Ib\" /* ɵɵdefineInjectable */])({ factory: function Directionality_Factory() { return new Directionality(Object(core[\"Tb\" /* ɵɵinject */])(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\n    return Directionality;\n})();\nlet bidi_Dir = /*@__PURE__*/ (() => {\n    class Dir {\n        constructor() {\n            /** Normalized direction that accounts for invalid/unsupported values. */\n            this._dir = 'ltr';\n            /** Whether the `value` has been set to its initial value. */\n            this._isInitialized = false;\n            /** Event emitted when the direction changes. */\n            this.change = new core[\"o\" /* EventEmitter */]();\n        }\n        /** @docs-private */\n        get dir() { return this._dir; }\n        set dir(value) {\n            const old = this._dir;\n            const normalizedValue = value ? value.toLowerCase() : value;\n            this._rawDir = value;\n            this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n            if (old !== this._dir && this._isInitialized) {\n                this.change.emit(this._dir);\n            }\n        }\n        /** Current layout direction of the element. */\n        get value() { return this.dir; }\n        /** Initialize once default value has been set. */\n        ngAfterContentInit() {\n            this._isInitialized = true;\n        }\n        ngOnDestroy() {\n            this.change.complete();\n        }\n    }\n    Dir.ɵfac = function Dir_Factory(t) { return new (t || Dir)(); };\n    Dir.ɵdir = /*@__PURE__*/ core[\"Hb\" /* ɵɵdefineDirective */]({ type: Dir, selectors: [[\"\", \"dir\", \"\"]], hostVars: 1, hostBindings: function Dir_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Db\" /* ɵɵattribute */](\"dir\", ctx._rawDir);\n            }\n        }, inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, exportAs: [\"dir\"], features: [/*@__PURE__*/ core[\"Bb\" /* ɵɵProvidersFeature */]([{ provide: bidi_Directionality, useExisting: Dir }])] });\n    return Dir;\n})();\nlet bidi_BidiModule = /*@__PURE__*/ (() => {\n    class BidiModule {\n    }\n    BidiModule.ɵmod = /*@__PURE__*/ core[\"Kb\" /* ɵɵdefineNgModule */]({ type: BidiModule });\n    BidiModule.ɵinj = /*@__PURE__*/ core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function BidiModule_Factory(t) { return new (t || BidiModule)(); } });\n    return BidiModule;\n})();\n/*@__PURE__*/ (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"jc\" /* ɵɵsetNgModuleScope */](bidi_BidiModule, { declarations: [bidi_Dir], exports: [bidi_Dir] }); })();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=bidi.js.map\n\n// CONCATENATED MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass collections_ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : Object(of[\"a\" /* of */])(this._data);\n    }\n    disconnect() { }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n    }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) { // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* INSERTED */ : 0 /* REPLACED */;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* REMOVED */;\n            }\n            else { // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass collections_SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject[\"a\" /* Subject */]();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\nlet collections_UniqueSelectionDispatcher = /*@__PURE__*/ (() => {\n    class UniqueSelectionDispatcher {\n        constructor() {\n            this._listeners = [];\n        }\n        /**\n         * Notify other items that selection for the given name has been set.\n         * @param id ID of the item.\n         * @param name Name of the item.\n         */\n        notify(id, name) {\n            for (let listener of this._listeners) {\n                listener(id, name);\n            }\n        }\n        /**\n         * Listen for future changes to item selection.\n         * @return Function used to deregister listener\n         */\n        listen(listener) {\n            this._listeners.push(listener);\n            return () => {\n                this._listeners = this._listeners.filter((registered) => {\n                    return listener !== registered;\n                });\n            };\n        }\n        ngOnDestroy() {\n            this._listeners = [];\n        }\n    }\n    UniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\n    UniqueSelectionDispatcher.ɵprov = /*@__PURE__*/ Object(core[\"Ib\" /* ɵɵdefineInjectable */])({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n    return UniqueSelectionDispatcher;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = /*@__PURE__*/ new core[\"s\" /* InjectionToken */]('_ViewRepeater');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=collections.js.map\n\n// CONCATENATED MODULE: ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js\n\n\n\n\n\n\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\n\n\n\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = /*@__PURE__*/ new core[\"s\" /* InjectionToken */]('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass scrolling_FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject[\"a\" /* Subject */]();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(Object(distinctUntilChanged[\"a\" /* distinctUntilChanged */])());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = (this._itemSize > 0) ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\nlet scrolling_CdkFixedSizeVirtualScroll = /*@__PURE__*/ (() => {\n    class CdkFixedSizeVirtualScroll {\n        constructor() {\n            this._itemSize = 20;\n            this._minBufferPx = 100;\n            this._maxBufferPx = 200;\n            /** The scroll strategy used by this directive. */\n            this._scrollStrategy = new scrolling_FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n        /** The size of the items in the list (in pixels). */\n        get itemSize() { return this._itemSize; }\n        set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n        /**\n         * The minimum amount of buffer rendered beyond the viewport (in pixels).\n         * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n         */\n        get minBufferPx() { return this._minBufferPx; }\n        set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n        /**\n         * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n         */\n        get maxBufferPx() { return this._maxBufferPx; }\n        set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n        ngOnChanges() {\n            this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n    }\n    CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\n    CdkFixedSizeVirtualScroll.ɵdir = /*@__PURE__*/ core[\"Hb\" /* ɵɵdefineDirective */]({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [/*@__PURE__*/ core[\"Bb\" /* ɵɵProvidersFeature */]([{\n                    provide: VIRTUAL_SCROLL_STRATEGY,\n                    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                    deps: [/*@__PURE__*/ Object(core[\"V\" /* forwardRef */])(() => CdkFixedSizeVirtualScroll)]\n                }]), core[\"Ab\" /* ɵɵNgOnChangesFeature */]] });\n    return CdkFixedSizeVirtualScroll;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\nlet scrolling_ScrollDispatcher = /*@__PURE__*/ (() => {\n    class ScrollDispatcher {\n        constructor(_ngZone, _platform, document) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n            this._scrolled = new Subject[\"a\" /* Subject */]();\n            /** Keeps track of the global `scroll` and `resize` subscriptions. */\n            this._globalSubscription = null;\n            /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n            this._scrolledCount = 0;\n            /**\n             * Map of all the scrollable references that are registered with the service and their\n             * scroll event subscriptions.\n             */\n            this.scrollContainers = new Map();\n            this._document = document;\n        }\n        /**\n         * Registers a scrollable instance with the service and listens for its scrolled events. When the\n         * scrollable is scrolled, the service emits the event to its scrolled observable.\n         * @param scrollable Scrollable instance to be registered.\n         */\n        register(scrollable) {\n            if (!this.scrollContainers.has(scrollable)) {\n                this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                    .subscribe(() => this._scrolled.next(scrollable)));\n            }\n        }\n        /**\n         * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n         * @param scrollable Scrollable instance to be deregistered.\n         */\n        deregister(scrollable) {\n            const scrollableReference = this.scrollContainers.get(scrollable);\n            if (scrollableReference) {\n                scrollableReference.unsubscribe();\n                this.scrollContainers.delete(scrollable);\n            }\n        }\n        /**\n         * Returns an observable that emits an event whenever any of the registered Scrollable\n         * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n         * to override the default \"throttle\" time.\n         *\n         * **Note:** in order to avoid hitting change detection for every scroll event,\n         * all of the events emitted from this stream will be run outside the Angular zone.\n         * If you need to update any data bindings as a result of a scroll event, you have\n         * to run the callback using `NgZone.run`.\n         */\n        scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n            if (!this._platform.isBrowser) {\n                return Object(of[\"a\" /* of */])();\n            }\n            return new Observable[\"a\" /* Observable */]((observer) => {\n                if (!this._globalSubscription) {\n                    this._addGlobalListener();\n                }\n                // In the case of a 0ms delay, use an observable without auditTime\n                // since it does add a perceptible delay in processing overhead.\n                const subscription = auditTimeInMs > 0 ?\n                    this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                    this._scrolled.subscribe(observer);\n                this._scrolledCount++;\n                return () => {\n                    subscription.unsubscribe();\n                    this._scrolledCount--;\n                    if (!this._scrolledCount) {\n                        this._removeGlobalListener();\n                    }\n                };\n            });\n        }\n        ngOnDestroy() {\n            this._removeGlobalListener();\n            this.scrollContainers.forEach((_, container) => this.deregister(container));\n            this._scrolled.complete();\n        }\n        /**\n         * Returns an observable that emits whenever any of the\n         * scrollable ancestors of an element are scrolled.\n         * @param elementOrElementRef Element whose ancestors to listen for.\n         * @param auditTimeInMs Time to throttle the scroll events.\n         */\n        ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n            const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n            return this.scrolled(auditTimeInMs).pipe(Object(filter[\"a\" /* filter */])(target => {\n                return !target || ancestors.indexOf(target) > -1;\n            }));\n        }\n        /** Returns all registered Scrollables that contain the provided element. */\n        getAncestorScrollContainers(elementOrElementRef) {\n            const scrollingContainers = [];\n            this.scrollContainers.forEach((_subscription, scrollable) => {\n                if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                    scrollingContainers.push(scrollable);\n                }\n            });\n            return scrollingContainers;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            return this._document.defaultView || window;\n        }\n        /** Returns true if the element is contained within the provided Scrollable. */\n        _scrollableContainsElement(scrollable, elementOrElementRef) {\n            let element = coerceElement(elementOrElementRef);\n            let scrollableElement = scrollable.getElementRef().nativeElement;\n            // Traverse through the element parents until we reach null, checking if any of the elements\n            // are the scrollable's element.\n            do {\n                if (element == scrollableElement) {\n                    return true;\n                }\n            } while (element = element.parentElement);\n            return false;\n        }\n        /** Sets up the global scroll listeners. */\n        _addGlobalListener() {\n            this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                return Object(fromEvent[\"a\" /* fromEvent */])(window.document, 'scroll').subscribe(() => this._scrolled.next());\n            });\n        }\n        /** Cleans up the global scroll listener. */\n        _removeGlobalListener() {\n            if (this._globalSubscription) {\n                this._globalSubscription.unsubscribe();\n                this._globalSubscription = null;\n            }\n        }\n    }\n    ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(core[\"Tb\" /* ɵɵinject */](core[\"B\" /* NgZone */]), core[\"Tb\" /* ɵɵinject */](platform_Platform), core[\"Tb\" /* ɵɵinject */](common[\"c\" /* DOCUMENT */], 8)); };\n    ScrollDispatcher.ɵprov = /*@__PURE__*/ Object(core[\"Ib\" /* ɵɵdefineInjectable */])({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(Object(core[\"Tb\" /* ɵɵinject */])(core[\"B\" /* NgZone */]), Object(core[\"Tb\" /* ɵɵinject */])(platform_Platform), Object(core[\"Tb\" /* ɵɵinject */])(common[\"c\" /* DOCUMENT */], 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\n    return ScrollDispatcher;\n})();\nlet scrolling_CdkScrollable = /*@__PURE__*/ (() => {\n    class CdkScrollable {\n        constructor(elementRef, scrollDispatcher, ngZone, dir) {\n            this.elementRef = elementRef;\n            this.scrollDispatcher = scrollDispatcher;\n            this.ngZone = ngZone;\n            this.dir = dir;\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            this._elementScrolled = new Observable[\"a\" /* Observable */]((observer) => this.ngZone.runOutsideAngular(() => Object(fromEvent[\"a\" /* fromEvent */])(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n                .subscribe(observer)));\n        }\n        ngOnInit() {\n            this.scrollDispatcher.register(this);\n        }\n        ngOnDestroy() {\n            this.scrollDispatcher.deregister(this);\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Returns observable that emits when a scroll event is fired on the host element. */\n        elementScrolled() {\n            return this._elementScrolled;\n        }\n        /** Gets the ElementRef for the viewport. */\n        getElementRef() {\n            return this.elementRef;\n        }\n        /**\n         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param options specified the offsets to scroll to.\n         */\n        scrollTo(options) {\n            const el = this.elementRef.nativeElement;\n            const isRtl = this.dir && this.dir.value == 'rtl';\n            // Rewrite start & end offsets as right or left offsets.\n            if (options.left == null) {\n                options.left = isRtl ? options.end : options.start;\n            }\n            if (options.right == null) {\n                options.right = isRtl ? options.start : options.end;\n            }\n            // Rewrite the bottom offset as a top offset.\n            if (options.bottom != null) {\n                options.top =\n                    el.scrollHeight - el.clientHeight - options.bottom;\n            }\n            // Rewrite the right offset as a left offset.\n            if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n                if (options.left != null) {\n                    options.right =\n                        el.scrollWidth - el.clientWidth - options.left;\n                }\n                if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                    options.left = options.right;\n                }\n                else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                    options.left = options.right ? -options.right : options.right;\n                }\n            }\n            else {\n                if (options.right != null) {\n                    options.left =\n                        el.scrollWidth - el.clientWidth - options.right;\n                }\n            }\n            this._applyScrollToOptions(options);\n        }\n        _applyScrollToOptions(options) {\n            const el = this.elementRef.nativeElement;\n            if (supportsScrollBehavior()) {\n                el.scrollTo(options);\n            }\n            else {\n                if (options.top != null) {\n                    el.scrollTop = options.top;\n                }\n                if (options.left != null) {\n                    el.scrollLeft = options.left;\n                }\n            }\n        }\n        /**\n         * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n         * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n         * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param from The edge to measure from.\n         */\n        measureScrollOffset(from) {\n            const LEFT = 'left';\n            const RIGHT = 'right';\n            const el = this.elementRef.nativeElement;\n            if (from == 'top') {\n                return el.scrollTop;\n            }\n            if (from == 'bottom') {\n                return el.scrollHeight - el.clientHeight - el.scrollTop;\n            }\n            // Rewrite start & end as left or right offsets.\n            const isRtl = this.dir && this.dir.value == 'rtl';\n            if (from == 'start') {\n                from = isRtl ? RIGHT : LEFT;\n            }\n            else if (from == 'end') {\n                from = isRtl ? LEFT : RIGHT;\n            }\n            if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n                // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n                else {\n                    return el.scrollLeft;\n                }\n            }\n            else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n                // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft + el.scrollWidth - el.clientWidth;\n                }\n                else {\n                    return -el.scrollLeft;\n                }\n            }\n            else {\n                // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n                // (scrollWidth - clientWidth) when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft;\n                }\n                else {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n            }\n        }\n    }\n    CdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(core[\"Mb\" /* ɵɵdirectiveInject */](core[\"m\" /* ElementRef */]), core[\"Mb\" /* ɵɵdirectiveInject */](scrolling_ScrollDispatcher), core[\"Mb\" /* ɵɵdirectiveInject */](core[\"B\" /* NgZone */]), core[\"Mb\" /* ɵɵdirectiveInject */](bidi_Directionality, 8)); };\n    CdkScrollable.ɵdir = /*@__PURE__*/ core[\"Hb\" /* ɵɵdefineDirective */]({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n    return CdkScrollable;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\nlet scrolling_ViewportRuler = /*@__PURE__*/ (() => {\n    class ViewportRuler {\n        constructor(_platform, ngZone, document) {\n            this._platform = _platform;\n            /** Stream of viewport change events. */\n            this._change = new Subject[\"a\" /* Subject */]();\n            /** Event listener that will be used to handle the viewport change events. */\n            this._changeListener = (event) => {\n                this._change.next(event);\n            };\n            this._document = document;\n            ngZone.runOutsideAngular(() => {\n                if (_platform.isBrowser) {\n                    const window = this._getWindow();\n                    // Note that bind the events ourselves, rather than going through something like RxJS's\n                    // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                    window.addEventListener('resize', this._changeListener);\n                    window.addEventListener('orientationchange', this._changeListener);\n                }\n                // We don't need to keep track of the subscription,\n                // because we complete the `change` stream on destroy.\n                this.change().subscribe(() => this._updateViewportSize());\n            });\n        }\n        ngOnDestroy() {\n            if (this._platform.isBrowser) {\n                const window = this._getWindow();\n                window.removeEventListener('resize', this._changeListener);\n                window.removeEventListener('orientationchange', this._changeListener);\n            }\n            this._change.complete();\n        }\n        /** Returns the viewport's width and height. */\n        getViewportSize() {\n            if (!this._viewportSize) {\n                this._updateViewportSize();\n            }\n            const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n            // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n            if (!this._platform.isBrowser) {\n                this._viewportSize = null;\n            }\n            return output;\n        }\n        /** Gets a ClientRect for the viewport's bounds. */\n        getViewportRect() {\n            // Use the document element's bounding rect rather than the window scroll properties\n            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n            // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n            // can disagree when the page is pinch-zoomed (on devices that support touch).\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n            // We use the documentElement instead of the body because, by default (without a css reset)\n            // browsers typically give the document body an 8px margin, which is not included in\n            // getBoundingClientRect().\n            const scrollPosition = this.getViewportScrollPosition();\n            const { width, height } = this.getViewportSize();\n            return {\n                top: scrollPosition.top,\n                left: scrollPosition.left,\n                bottom: scrollPosition.top + height,\n                right: scrollPosition.left + width,\n                height,\n                width,\n            };\n        }\n        /** Gets the (top, left) scroll position of the viewport. */\n        getViewportScrollPosition() {\n            // While we can get a reference to the fake document\n            // during SSR, it doesn't have getBoundingClientRect.\n            if (!this._platform.isBrowser) {\n                return { top: 0, left: 0 };\n            }\n            // The top-left-corner of the viewport is determined by the scroll position of the document\n            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n            // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n            // `document.documentElement` works consistently, where the `top` and `left` values will\n            // equal negative the scroll position.\n            const document = this._document;\n            const window = this._getWindow();\n            const documentElement = document.documentElement;\n            const documentRect = documentElement.getBoundingClientRect();\n            const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                documentElement.scrollTop || 0;\n            const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                documentElement.scrollLeft || 0;\n            return { top, left };\n        }\n        /**\n         * Returns a stream that emits whenever the size of the viewport changes.\n         * @param throttleTime Time in milliseconds to throttle the stream.\n         */\n        change(throttleTime = DEFAULT_RESIZE_TIME) {\n            return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            return this._document.defaultView || window;\n        }\n        /** Updates the cached viewport size. */\n        _updateViewportSize() {\n            const window = this._getWindow();\n            this._viewportSize = this._platform.isBrowser ?\n                { width: window.innerWidth, height: window.innerHeight } :\n                { width: 0, height: 0 };\n        }\n    }\n    ViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(core[\"Tb\" /* ɵɵinject */](platform_Platform), core[\"Tb\" /* ɵɵinject */](core[\"B\" /* NgZone */]), core[\"Tb\" /* ɵɵinject */](common[\"c\" /* DOCUMENT */], 8)); };\n    ViewportRuler.ɵprov = /*@__PURE__*/ Object(core[\"Ib\" /* ɵɵdefineInjectable */])({ factory: function ViewportRuler_Factory() { return new ViewportRuler(Object(core[\"Tb\" /* ɵɵinject */])(platform_Platform), Object(core[\"Tb\" /* ɵɵinject */])(core[\"B\" /* NgZone */]), Object(core[\"Tb\" /* ɵɵinject */])(common[\"c\" /* DOCUMENT */], 8)); }, token: ViewportRuler, providedIn: \"root\" });\n    return ViewportRuler;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asap[\"b\" /* asapScheduler */];\nlet scrolling_CdkVirtualScrollViewport = /*@__PURE__*/ (() => {\n    class CdkVirtualScrollViewport extends scrolling_CdkScrollable {\n        constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n            super(elementRef, scrollDispatcher, ngZone, dir);\n            this.elementRef = elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._scrollStrategy = _scrollStrategy;\n            /** Emits when the viewport is detached from a CdkVirtualForOf. */\n            this._detachedSubject = new Subject[\"a\" /* Subject */]();\n            /** Emits when the rendered range changes. */\n            this._renderedRangeSubject = new Subject[\"a\" /* Subject */]();\n            this._orientation = 'vertical';\n            // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n            // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n            // depending on how the strategy calculates the scrolled index, it may come at a cost to\n            // performance.\n            /** Emits when the index of the first element visible in the viewport changes. */\n            this.scrolledIndexChange = new Observable[\"a\" /* Observable */]((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n            /** A stream that emits whenever the rendered range changes. */\n            this.renderedRangeStream = this._renderedRangeSubject;\n            /**\n             * The total size of all content (in pixels), including content that is not currently rendered.\n             */\n            this._totalContentSize = 0;\n            /** A string representing the `style.width` property value to be used for the spacer element. */\n            this._totalContentWidth = '';\n            /** A string representing the `style.height` property value to be used for the spacer element. */\n            this._totalContentHeight = '';\n            /** The currently rendered range of indices. */\n            this._renderedRange = { start: 0, end: 0 };\n            /** The length of the data bound to this viewport (in number of items). */\n            this._dataLength = 0;\n            /** The size of the viewport (in pixels). */\n            this._viewportSize = 0;\n            /** The last rendered content offset that was set. */\n            this._renderedContentOffset = 0;\n            /**\n             * Whether the last rendered content offset was to the end of the content (and therefore needs to\n             * be rewritten as an offset to the start of the content).\n             */\n            this._renderedContentOffsetNeedsRewrite = false;\n            /** Whether there is a pending change detection cycle. */\n            this._isChangeDetectionPending = false;\n            /** A list of functions to run after the next change detection cycle. */\n            this._runAfterChangeDetection = [];\n            /** Subscription to changes in the viewport size. */\n            this._viewportChanges = Subscription[\"a\" /* Subscription */].EMPTY;\n            if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n            }\n            this._viewportChanges = viewportRuler.change().subscribe(() => {\n                this.checkViewportSize();\n            });\n        }\n        /** The direction the viewport scrolls. */\n        get orientation() {\n            return this._orientation;\n        }\n        set orientation(orientation) {\n            if (this._orientation !== orientation) {\n                this._orientation = orientation;\n                this._calculateSpacerSize();\n            }\n        }\n        ngOnInit() {\n            super.ngOnInit();\n            // It's still too early to measure the viewport at this point. Deferring with a promise allows\n            // the Viewport to be rendered with the correct size before we measure. We run this outside the\n            // zone to avoid causing more change detection cycles. We handle the change detection loop\n            // ourselves instead.\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._measureViewportSize();\n                this._scrollStrategy.attach(this);\n                this.elementScrolled()\n                    .pipe(\n                // Start off with a fake scroll event so we properly detect our initial position.\n                Object(startWith[\"a\" /* startWith */])(null), \n                // Collect multiple events into one until the next animation frame. This way if\n                // there are multiple scroll events in the same frame we only need to recheck\n                // our layout once.\n                auditTime(0, SCROLL_SCHEDULER))\n                    .subscribe(() => this._scrollStrategy.onContentScrolled());\n                this._markChangeDetectionNeeded();\n            }));\n        }\n        ngOnDestroy() {\n            this.detach();\n            this._scrollStrategy.detach();\n            // Complete all subjects\n            this._renderedRangeSubject.complete();\n            this._detachedSubject.complete();\n            this._viewportChanges.unsubscribe();\n            super.ngOnDestroy();\n        }\n        /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n        attach(forOf) {\n            if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('CdkVirtualScrollViewport is already attached.');\n            }\n            // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n            // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n            // change detection loop ourselves.\n            this.ngZone.runOutsideAngular(() => {\n                this._forOf = forOf;\n                this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                    const newLength = data.length;\n                    if (newLength !== this._dataLength) {\n                        this._dataLength = newLength;\n                        this._scrollStrategy.onDataLengthChanged();\n                    }\n                    this._doChangeDetection();\n                });\n            });\n        }\n        /** Detaches the current `CdkVirtualForOf`. */\n        detach() {\n            this._forOf = null;\n            this._detachedSubject.next();\n        }\n        /** Gets the length of the data bound to this viewport (in number of items). */\n        getDataLength() {\n            return this._dataLength;\n        }\n        /** Gets the size of the viewport (in pixels). */\n        getViewportSize() {\n            return this._viewportSize;\n        }\n        // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n        // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n        // setting it to something else, but its error prone and should probably be split into\n        // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n        /** Get the current rendered range of items. */\n        getRenderedRange() {\n            return this._renderedRange;\n        }\n        /**\n         * Sets the total size of all content (in pixels), including content that is not currently\n         * rendered.\n         */\n        setTotalContentSize(size) {\n            if (this._totalContentSize !== size) {\n                this._totalContentSize = size;\n                this._calculateSpacerSize();\n                this._markChangeDetectionNeeded();\n            }\n        }\n        /** Sets the currently rendered range of indices. */\n        setRenderedRange(range) {\n            if (!rangesEqual(this._renderedRange, range)) {\n                this._renderedRangeSubject.next(this._renderedRange = range);\n                this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n            }\n        }\n        /**\n         * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n         */\n        getOffsetToRenderedContentStart() {\n            return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n        }\n        /**\n         * Sets the offset from the start of the viewport to either the start or end of the rendered data\n         * (in pixels).\n         */\n        setRenderedContentOffset(offset, to = 'to-start') {\n            // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n            // in the negative direction.\n            const isRtl = this.dir && this.dir.value == 'rtl';\n            const isHorizontal = this.orientation == 'horizontal';\n            const axis = isHorizontal ? 'X' : 'Y';\n            const axisDirection = isHorizontal && isRtl ? -1 : 1;\n            let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n            this._renderedContentOffset = offset;\n            if (to === 'to-end') {\n                transform += ` translate${axis}(-100%)`;\n                // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n                // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n                // expand upward).\n                this._renderedContentOffsetNeedsRewrite = true;\n            }\n            if (this._renderedContentTransform != transform) {\n                // We know this value is safe because we parse `offset` with `Number()` before passing it\n                // into the string.\n                this._renderedContentTransform = transform;\n                this._markChangeDetectionNeeded(() => {\n                    if (this._renderedContentOffsetNeedsRewrite) {\n                        this._renderedContentOffset -= this.measureRenderedContentSize();\n                        this._renderedContentOffsetNeedsRewrite = false;\n                        this.setRenderedContentOffset(this._renderedContentOffset);\n                    }\n                    else {\n                        this._scrollStrategy.onRenderedOffsetChanged();\n                    }\n                });\n            }\n        }\n        /**\n         * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n         * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n         * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n         * @param offset The offset to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        scrollToOffset(offset, behavior = 'auto') {\n            const options = { behavior };\n            if (this.orientation === 'horizontal') {\n                options.start = offset;\n            }\n            else {\n                options.top = offset;\n            }\n            this.scrollTo(options);\n        }\n        /**\n         * Scrolls to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        scrollToIndex(index, behavior = 'auto') {\n            this._scrollStrategy.scrollToIndex(index, behavior);\n        }\n        /**\n         * Gets the current scroll offset from the start of the viewport (in pixels).\n         * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n         *     in horizontal mode.\n         */\n        measureScrollOffset(from) {\n            return from ?\n                super.measureScrollOffset(from) :\n                super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n        }\n        /** Measure the combined size of all of the rendered items. */\n        measureRenderedContentSize() {\n            const contentEl = this._contentWrapper.nativeElement;\n            return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n        }\n        /**\n         * Measure the total combined size of the given range. Throws if the range includes items that are\n         * not rendered.\n         */\n        measureRangeSize(range) {\n            if (!this._forOf) {\n                return 0;\n            }\n            return this._forOf.measureRangeSize(range, this.orientation);\n        }\n        /** Update the viewport dimensions and re-render. */\n        checkViewportSize() {\n            // TODO: Cleanup later when add logic for handling content resize\n            this._measureViewportSize();\n            this._scrollStrategy.onDataLengthChanged();\n        }\n        /** Measure the viewport size. */\n        _measureViewportSize() {\n            const viewportEl = this.elementRef.nativeElement;\n            this._viewportSize = this.orientation === 'horizontal' ?\n                viewportEl.clientWidth : viewportEl.clientHeight;\n        }\n        /** Queue up change detection to run. */\n        _markChangeDetectionNeeded(runAfter) {\n            if (runAfter) {\n                this._runAfterChangeDetection.push(runAfter);\n            }\n            // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n            // properties sequentially we only have to run `_doChangeDetection` once at the end.\n            if (!this._isChangeDetectionPending) {\n                this._isChangeDetectionPending = true;\n                this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                    this._doChangeDetection();\n                }));\n            }\n        }\n        /** Run change detection. */\n        _doChangeDetection() {\n            this._isChangeDetectionPending = false;\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n            const runAfterChangeDetection = this._runAfterChangeDetection;\n            this._runAfterChangeDetection = [];\n            for (const fn of runAfterChangeDetection) {\n                fn();\n            }\n        }\n        /** Calculates the `style.width` and `style.height` for the spacer element. */\n        _calculateSpacerSize() {\n            this._totalContentHeight =\n                this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n            this._totalContentWidth =\n                this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n        }\n    }\n    CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(core[\"Mb\" /* ɵɵdirectiveInject */](core[\"m\" /* ElementRef */]), core[\"Mb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Mb\" /* ɵɵdirectiveInject */](core[\"B\" /* NgZone */]), core[\"Mb\" /* ɵɵdirectiveInject */](VIRTUAL_SCROLL_STRATEGY, 8), core[\"Mb\" /* ɵɵdirectiveInject */](bidi_Directionality, 8), core[\"Mb\" /* ɵɵdirectiveInject */](scrolling_ScrollDispatcher), core[\"Mb\" /* ɵɵdirectiveInject */](scrolling_ViewportRuler)); };\n    CdkVirtualScrollViewport.ɵcmp = /*@__PURE__*/ core[\"Gb\" /* ɵɵdefineComponent */]({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n            if (rf & 1) {\n                core[\"pc\" /* ɵɵviewQuery */](_c0, 3);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"gc\" /* ɵɵqueryRefresh */](_t = core[\"Yb\" /* ɵɵloadQuery */]()) && (ctx._contentWrapper = _t.first);\n            }\n        }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Eb\" /* ɵɵclassProp */](\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n            }\n        }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [/*@__PURE__*/ core[\"Bb\" /* ɵɵProvidersFeature */]([{\n                    provide: scrolling_CdkScrollable,\n                    useExisting: CdkVirtualScrollViewport\n                }]), core[\"zb\" /* ɵɵInheritDefinitionFeature */]], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"dc\" /* ɵɵprojectionDef */]();\n                core[\"Pb\" /* ɵɵelementStart */](0, \"div\", 0, 1);\n                core[\"cc\" /* ɵɵprojection */](2);\n                core[\"Ob\" /* ɵɵelementEnd */]();\n                core[\"Nb\" /* ɵɵelement */](3, \"div\", 2);\n            }\n            if (rf & 2) {\n                core[\"Cb\" /* ɵɵadvance */](3);\n                core[\"kc\" /* ɵɵstyleProp */](\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n            }\n        }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\n    return CdkVirtualScrollViewport;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\nlet scrolling_CdkVirtualForOf = /*@__PURE__*/ (() => {\n    class CdkVirtualForOf {\n        constructor(\n        /** The view container to add items to. */\n        _viewContainerRef, \n        /** The template to use when stamping out new items. */\n        _template, \n        /** The set of available differs. */\n        _differs, \n        /** The strategy used to render items in the virtual scroll viewport. */\n        _viewRepeater, \n        /** The virtual scrolling viewport that these items are being rendered in. */\n        _viewport, ngZone) {\n            this._viewContainerRef = _viewContainerRef;\n            this._template = _template;\n            this._differs = _differs;\n            this._viewRepeater = _viewRepeater;\n            this._viewport = _viewport;\n            /** Emits when the rendered view of the data changes. */\n            this.viewChange = new Subject[\"a\" /* Subject */]();\n            /** Subject that emits when a new DataSource instance is given. */\n            this._dataSourceChanges = new Subject[\"a\" /* Subject */]();\n            /** Emits whenever the data in the current DataSource changes. */\n            this.dataStream = this._dataSourceChanges\n                .pipe(\n            // Start off with null `DataSource`.\n            Object(startWith[\"a\" /* startWith */])(null), \n            // Bundle up the previous and current data sources so we can work with both.\n            Object(pairwise[\"a\" /* pairwise */])(), \n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            Object(switchMap[\"a\" /* switchMap */])(([prev, cur]) => this._changeDataSource(prev, cur)), \n            // Replay the last emitted data when someone subscribes.\n            Object(shareReplay[\"a\" /* shareReplay */])(1));\n            /** The differ used to calculate changes to the data. */\n            this._differ = null;\n            /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n            this._needsUpdate = false;\n            this._destroyed = new Subject[\"a\" /* Subject */]();\n            this.dataStream.subscribe(data => {\n                this._data = data;\n                this._onRenderedDataChange();\n            });\n            this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n                this._renderedRange = range;\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n                this._onRenderedDataChange();\n            });\n            this._viewport.attach(this);\n        }\n        /** The DataSource to display. */\n        get cdkVirtualForOf() {\n            return this._cdkVirtualForOf;\n        }\n        set cdkVirtualForOf(value) {\n            this._cdkVirtualForOf = value;\n            if (isDataSource(value)) {\n                this._dataSourceChanges.next(value);\n            }\n            else {\n                // If value is an an NgIterable, convert it to an array.\n                this._dataSourceChanges.next(new collections_ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n            }\n        }\n        /**\n         * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n         * the item and produces a value to be used as the item's identity when tracking changes.\n         */\n        get cdkVirtualForTrackBy() {\n            return this._cdkVirtualForTrackBy;\n        }\n        set cdkVirtualForTrackBy(fn) {\n            this._needsUpdate = true;\n            this._cdkVirtualForTrackBy = fn ?\n                (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n                undefined;\n        }\n        /** The template used to stamp out new elements. */\n        set cdkVirtualForTemplate(value) {\n            if (value) {\n                this._needsUpdate = true;\n                this._template = value;\n            }\n        }\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        get cdkVirtualForTemplateCacheSize() {\n            return this._viewRepeater.viewCacheSize;\n        }\n        set cdkVirtualForTemplateCacheSize(size) {\n            this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n        }\n        /**\n         * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n         * in the specified range. Throws an error if the range includes items that are not currently\n         * rendered.\n         */\n        measureRangeSize(range, orientation) {\n            if (range.start >= range.end) {\n                return 0;\n            }\n            if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error(`Error: attempted to measure an item that isn't rendered.`);\n            }\n            // The index into the list of rendered views for the first item in the range.\n            const renderedStartIndex = range.start - this._renderedRange.start;\n            // The length of the range we're measuring.\n            const rangeLen = range.end - range.start;\n            // Loop over all the views, find the first and land node and compute the size by subtracting\n            // the top of the first node from the bottom of the last one.\n            let firstNode;\n            let lastNode;\n            // Find the first node by starting from the beginning and going forwards.\n            for (let i = 0; i < rangeLen; i++) {\n                const view = this._viewContainerRef.get(i + renderedStartIndex);\n                if (view && view.rootNodes.length) {\n                    firstNode = lastNode = view.rootNodes[0];\n                    break;\n                }\n            }\n            // Find the last node by starting from the end and going backwards.\n            for (let i = rangeLen - 1; i > -1; i--) {\n                const view = this._viewContainerRef.get(i + renderedStartIndex);\n                if (view && view.rootNodes.length) {\n                    lastNode = view.rootNodes[view.rootNodes.length - 1];\n                    break;\n                }\n            }\n            return firstNode && lastNode ?\n                getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n        }\n        ngDoCheck() {\n            if (this._differ && this._needsUpdate) {\n                // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n                // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n                // changing (need to do this diff).\n                const changes = this._differ.diff(this._renderedItems);\n                if (!changes) {\n                    this._updateContext();\n                }\n                else {\n                    this._applyChanges(changes);\n                }\n                this._needsUpdate = false;\n            }\n        }\n        ngOnDestroy() {\n            this._viewport.detach();\n            this._dataSourceChanges.next(undefined);\n            this._dataSourceChanges.complete();\n            this.viewChange.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._viewRepeater.detach();\n        }\n        /** React to scroll state changes in the viewport. */\n        _onRenderedDataChange() {\n            if (!this._renderedRange) {\n                return;\n            }\n            this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n            if (!this._differ) {\n                // Use a wrapper function for the `trackBy` so any new values are\n                // picked up automatically without having to recreate the differ.\n                this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                    return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n                });\n            }\n            this._needsUpdate = true;\n        }\n        /** Swap out one `DataSource` for another. */\n        _changeDataSource(oldDs, newDs) {\n            if (oldDs) {\n                oldDs.disconnect(this);\n            }\n            this._needsUpdate = true;\n            return newDs ? newDs.connect(this) : Object(of[\"a\" /* of */])();\n        }\n        /** Update the `CdkVirtualForOfContext` for all views. */\n        _updateContext() {\n            const count = this._data.length;\n            let i = this._viewContainerRef.length;\n            while (i--) {\n                const view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n                view.detectChanges();\n            }\n        }\n        /** Apply changes to the DOM. */\n        _applyChanges(changes) {\n            this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);\n            // Update $implicit for any items that had an identity change.\n            changes.forEachIdentityChange((record) => {\n                const view = this._viewContainerRef.get(record.currentIndex);\n                view.context.$implicit = record.item;\n            });\n            // Update the context variables on all items.\n            const count = this._data.length;\n            let i = this._viewContainerRef.length;\n            while (i--) {\n                const view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n            }\n        }\n        /** Update the computed properties on the `CdkVirtualForOfContext`. */\n        _updateComputedContextProperties(context) {\n            context.first = context.index === 0;\n            context.last = context.index === context.count - 1;\n            context.even = context.index % 2 === 0;\n            context.odd = !context.even;\n        }\n        _getEmbeddedViewArgs(record, index) {\n            // Note that it's important that we insert the item directly at the proper index,\n            // rather than inserting it and the moving it in place, because if there's a directive\n            // on the same node that injects the `ViewContainerRef`, Angular will insert another\n            // comment node which can throw off the move when it's being repeated for all items.\n            return {\n                templateRef: this._template,\n                context: {\n                    $implicit: record.item,\n                    // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                    // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                    cdkVirtualForOf: this._cdkVirtualForOf,\n                    index: -1,\n                    count: -1,\n                    first: false,\n                    last: false,\n                    odd: false,\n                    even: false\n                },\n                index,\n            };\n        }\n    }\n    CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(core[\"Mb\" /* ɵɵdirectiveInject */](core[\"R\" /* ViewContainerRef */]), core[\"Mb\" /* ɵɵdirectiveInject */](core[\"M\" /* TemplateRef */]), core[\"Mb\" /* ɵɵdirectiveInject */](core[\"u\" /* IterableDiffers */]), core[\"Mb\" /* ɵɵdirectiveInject */](_VIEW_REPEATER_STRATEGY), core[\"Mb\" /* ɵɵdirectiveInject */](scrolling_CdkVirtualScrollViewport, 4), core[\"Mb\" /* ɵɵdirectiveInject */](core[\"B\" /* NgZone */])); };\n    CdkVirtualForOf.ɵdir = /*@__PURE__*/ core[\"Hb\" /* ɵɵdefineDirective */]({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, features: [/*@__PURE__*/ core[\"Bb\" /* ɵɵProvidersFeature */]([\n                { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n            ])] });\n    return CdkVirtualForOf;\n})();\nlet scrolling_CdkScrollableModule = /*@__PURE__*/ (() => {\n    class CdkScrollableModule {\n    }\n    CdkScrollableModule.ɵmod = /*@__PURE__*/ core[\"Kb\" /* ɵɵdefineNgModule */]({ type: CdkScrollableModule });\n    CdkScrollableModule.ɵinj = /*@__PURE__*/ core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); } });\n    return CdkScrollableModule;\n})();\n/*@__PURE__*/ (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"jc\" /* ɵɵsetNgModuleScope */](scrolling_CdkScrollableModule, { declarations: [scrolling_CdkScrollable], exports: [scrolling_CdkScrollable] }); })();\nlet scrolling_ScrollingModule = /*@__PURE__*/ (() => {\n    class ScrollingModule {\n    }\n    ScrollingModule.ɵmod = /*@__PURE__*/ core[\"Kb\" /* ɵɵdefineNgModule */]({ type: ScrollingModule });\n    ScrollingModule.ɵinj = /*@__PURE__*/ core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); }, imports: [[\n                bidi_BidiModule,\n                platform_PlatformModule,\n                scrolling_CdkScrollableModule\n            ], bidi_BidiModule, scrolling_CdkScrollableModule] });\n    return ScrollingModule;\n})();\n/*@__PURE__*/ (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"jc\" /* ɵɵsetNgModuleScope */](scrolling_ScrollingModule, { declarations: function () { return [scrolling_CdkFixedSizeVirtualScroll, scrolling_CdkVirtualForOf, scrolling_CdkVirtualScrollViewport]; }, imports: function () {\n            return [bidi_BidiModule,\n                platform_PlatformModule, scrolling_CdkScrollableModule];\n        }, exports: function () { return [bidi_BidiModule, scrolling_CdkScrollableModule, scrolling_CdkFixedSizeVirtualScroll, scrolling_CdkVirtualForOf, scrolling_CdkVirtualScrollViewport]; } });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=scrolling.js.map\n\n// CONCATENATED MODULE: ./src/app/pages/search/search.module.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet search_module_SearchPageModule = /*@__PURE__*/ (() => {\r\n    class SearchPageModule {\r\n    }\r\n    SearchPageModule.ɵmod = core[\"Kb\" /* ɵɵdefineNgModule */]({ type: SearchPageModule });\r\n    SearchPageModule.ɵinj = core[\"Jb\" /* ɵɵdefineInjector */]({ factory: function SearchPageModule_Factory(t) { return new (t || SearchPageModule)(); }, imports: [[\r\n                common[\"b\" /* CommonModule */],\r\n                fesm2015_forms[\"b\" /* FormsModule */],\r\n                ionic_angular[\"f\" /* IonicModule */],\r\n                search_routing_module_SearchPageRoutingModule,\r\n                shared_module[\"a\" /* SharedModule */],\r\n                http[\"b\" /* HttpClientModule */],\r\n                ng2_search_filter_Ng2SearchPipeModule,\r\n                scrolling_ScrollingModule\r\n            ]] });\r\n    return SearchPageModule;\r\n})();\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}