{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{Tsnu:function(e,s,t){\"use strict\";t.r(s),t.d(s,\"startFocusVisible\",function(){return c});const o=\"ion-focused\",n=[\"Tab\",\"ArrowDown\",\"Space\",\"Escape\",\" \",\"Shift\",\"Enter\",\"ArrowLeft\",\"ArrowRight\",\"ArrowUp\"],c=()=>{let e=[],s=!0;const t=document,c=s=>{e.forEach(e=>e.classList.remove(o)),s.forEach(e=>e.classList.add(o)),e=s},i=()=>{s=!1,c([])};t.addEventListener(\"keydown\",e=>{s=n.includes(e.key),s||c([])}),t.addEventListener(\"focusin\",e=>{if(s&&e.composedPath){const s=e.composedPath().filter(e=>!!e.classList&&e.classList.contains(\"ion-focusable\"));c(s)}}),t.addEventListener(\"focusout\",()=>{t.activeElement===t.body&&c([])}),t.addEventListener(\"touchstart\",i),t.addEventListener(\"mousedown\",i)}}}]);","name":"14.6c35bc2b0831a1cce622.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[14],{\n\n/***/ \"Tsnu\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startFocusVisible\", function() { return startFocusVisible; });\nconst ION_FOCUSED = 'ion-focused';\r\nconst ION_FOCUSABLE = 'ion-focusable';\r\nconst FOCUS_KEYS = ['Tab', 'ArrowDown', 'Space', 'Escape', ' ', 'Shift', 'Enter', 'ArrowLeft', 'ArrowRight', 'ArrowUp'];\r\nconst startFocusVisible = () => {\r\n  let currentFocus = [];\r\n  let keyboardMode = true;\r\n  const doc = document;\r\n  const setFocus = (elements) => {\r\n    currentFocus.forEach(el => el.classList.remove(ION_FOCUSED));\r\n    elements.forEach(el => el.classList.add(ION_FOCUSED));\r\n    currentFocus = elements;\r\n  };\r\n  const pointerDown = () => {\r\n    keyboardMode = false;\r\n    setFocus([]);\r\n  };\r\n  doc.addEventListener('keydown', ev => {\r\n    keyboardMode = FOCUS_KEYS.includes(ev.key);\r\n    if (!keyboardMode) {\r\n      setFocus([]);\r\n    }\r\n  });\r\n  doc.addEventListener('focusin', ev => {\r\n    if (keyboardMode && ev.composedPath) {\r\n      const toFocus = ev.composedPath().filter((el) => {\r\n        if (el.classList) {\r\n          return el.classList.contains(ION_FOCUSABLE);\r\n        }\r\n        return false;\r\n      });\r\n      setFocus(toFocus);\r\n    }\r\n  });\r\n  doc.addEventListener('focusout', () => {\r\n    if (doc.activeElement === doc.body) {\r\n      setFocus([]);\r\n    }\r\n  });\r\n  doc.addEventListener('touchstart', pointerDown);\r\n  doc.addEventListener('mousedown', pointerDown);\r\n};\r\n\r\n\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}