{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{vnES:function(e,t,i){\"use strict\";i.r(t),i.d(t,\"ion_nav\",function(){return d}),i.d(t,\"ion_nav_link\",function(){return v});var n=i(\"2atR\"),s=i(\"GTku\"),o=i(\"Ke8Y\"),r=i(\"V2OV\"),a=i(\"bC4P\"),c=i(\"A2gu\");class h{constructor(e,t){this.component=e,this.params=t,this.state=1}async init(e){if(this.state=2,!this.element){const t=this.component;this.element=await Object(c.a)(this.delegate,e,t,[\"ion-page\",\"ion-page-invisible\"],this.params)}}_destroy(){Object(o.l)(3!==this.state,\"view state must be ATTACHED\");const e=this.element;e&&(this.delegate?this.delegate.removeViewFromDom(e.parentElement,e):e.remove()),this.nav=void 0,this.state=3}}const l=(e,t,i)=>{if(!e)return!1;if(e.component!==t)return!1;const n=e.params;if(n===i)return!0;if(!n&&!i)return!0;if(!n||!i)return!1;const s=Object.keys(n),o=Object.keys(i);if(s.length!==o.length)return!1;for(const r of s)if(n[r]!==i[r])return!1;return!0},u=(e,t)=>e?e instanceof h?e:new h(e,t):null,d=class{constructor(e){Object(n.o)(this,e),this.ionNavWillLoad=Object(n.g)(this,\"ionNavWillLoad\",7),this.ionNavWillChange=Object(n.g)(this,\"ionNavWillChange\",3),this.ionNavDidChange=Object(n.g)(this,\"ionNavDidChange\",3),this.transInstr=[],this.animationEnabled=!0,this.useRouter=!1,this.isTransitioning=!1,this.destroyed=!1,this.views=[],this.animated=!0}swipeGestureChanged(){this.gesture&&this.gesture.enable(!0===this.swipeGesture)}rootChanged(){void 0!==this.root&&(this.useRouter||this.setRoot(this.root,this.rootParams))}componentWillLoad(){if(this.useRouter=!!document.querySelector(\"ion-router\")&&!this.el.closest(\"[no-router]\"),void 0===this.swipeGesture){const e=Object(s.b)(this);this.swipeGesture=s.c.getBoolean(\"swipeBackEnabled\",\"ios\"===e)}this.ionNavWillLoad.emit()}async componentDidLoad(){this.rootChanged(),this.gesture=(await i.e(3).then(i.bind(null,\"qyRl\"))).createSwipeBackGesture(this.el,this.canStart.bind(this),this.onStart.bind(this),this.onMove.bind(this),this.onEnd.bind(this)),this.swipeGestureChanged()}disconnectedCallback(){for(const e of this.views)Object(r.h)(e.element,r.e),e._destroy();this.gesture&&(this.gesture.destroy(),this.gesture=void 0),this.transInstr.length=this.views.length=0,this.destroyed=!0}push(e,t,i,n){return this.queueTrns({insertStart:-1,insertViews:[{component:e,componentProps:t}],opts:i},n)}insert(e,t,i,n,s){return this.queueTrns({insertStart:e,insertViews:[{component:t,componentProps:i}],opts:n},s)}insertPages(e,t,i,n){return this.queueTrns({insertStart:e,insertViews:t,opts:i},n)}pop(e,t){return this.queueTrns({removeStart:-1,removeCount:1,opts:e},t)}popTo(e,t,i){const n={removeStart:-1,removeCount:-1,opts:t};return\"object\"==typeof e&&e.component?(n.removeView=e,n.removeStart=1):\"number\"==typeof e&&(n.removeStart=e+1),this.queueTrns(n,i)}popToRoot(e,t){return this.queueTrns({removeStart:1,removeCount:-1,opts:e},t)}removeIndex(e,t=1,i,n){return this.queueTrns({removeStart:e,removeCount:t,opts:i},n)}setRoot(e,t,i,n){return this.setPages([{component:e,componentProps:t}],i,n)}setPages(e,t,i){return null==t&&(t={}),!0!==t.animated&&(t.animated=!1),this.queueTrns({insertStart:0,insertViews:e,removeStart:0,removeCount:-1,opts:t},i)}setRouteId(e,t,i,n){const s=this.getActiveSync();if(l(s,e,t))return Promise.resolve({changed:!1,element:s.element});let o;const r=new Promise(e=>o=e);let a;const c={updateURL:!1,viewIsReady:e=>{let t;const i=new Promise(e=>t=e);return o({changed:!0,element:e,markVisible:async()=>{t(),await a}}),i}};if(\"root\"===i)a=this.setRoot(e,t,c);else{const s=this.views.find(i=>l(i,e,t));s?a=this.popTo(s,Object.assign(Object.assign({},c),{direction:\"back\",animationBuilder:n})):\"forward\"===i?a=this.push(e,t,Object.assign(Object.assign({},c),{animationBuilder:n})):\"back\"===i&&(a=this.setRoot(e,t,Object.assign(Object.assign({},c),{direction:\"back\",animated:!0,animationBuilder:n})))}return r}async getRouteId(){const e=this.getActiveSync();return e?{id:e.element.tagName,params:e.params,element:e.element}:void 0}getActive(){return Promise.resolve(this.getActiveSync())}getByIndex(e){return Promise.resolve(this.views[e])}canGoBack(e){return Promise.resolve(this.canGoBackSync(e))}getPrevious(e){return Promise.resolve(this.getPreviousSync(e))}getLength(){return this.views.length}getActiveSync(){return this.views[this.views.length-1]}canGoBackSync(e=this.getActiveSync()){return!(!e||!this.getPreviousSync(e))}getPreviousSync(e=this.getActiveSync()){if(!e)return;const t=this.views,i=t.indexOf(e);return i>0?t[i-1]:void 0}async queueTrns(e,t){if(this.isTransitioning&&null!=e.opts&&e.opts.skipIfBusy)return Promise.resolve(!1);const i=new Promise((t,i)=>{e.resolve=t,e.reject=i});if(e.done=t,e.opts&&!1!==e.opts.updateURL&&this.useRouter){const t=document.querySelector(\"ion-router\");if(t){const i=await t.canTransition();if(!1===i)return Promise.resolve(!1);if(\"string\"==typeof i)return t.push(i,e.opts.direction||\"back\"),Promise.resolve(!1)}}return e.insertViews&&0===e.insertViews.length&&(e.insertViews=void 0),this.transInstr.push(e),this.nextTrns(),i}success(e,t){if(this.destroyed)this.fireError(\"nav controller was destroyed\",t);else if(t.done&&t.done(e.hasCompleted,e.requiresTransition,e.enteringView,e.leavingView,e.direction),t.resolve(e.hasCompleted),!1!==t.opts.updateURL&&this.useRouter){const t=document.querySelector(\"ion-router\");t&&t.navChanged(\"back\"===e.direction?\"back\":\"forward\")}}failed(e,t){this.destroyed?this.fireError(\"nav controller was destroyed\",t):(this.transInstr.length=0,this.fireError(e,t))}fireError(e,t){t.done&&t.done(!1,!1,e),t.reject&&!this.destroyed?t.reject(e):t.resolve(!1)}nextTrns(){if(this.isTransitioning)return!1;const e=this.transInstr.shift();return!!e&&(this.runTransition(e),!0)}async runTransition(e){try{this.ionNavWillChange.emit(),this.isTransitioning=!0,this.prepareTI(e);const t=this.getActiveSync(),i=this.getEnteringView(e,t);if(!t&&!i)throw new Error(\"no views in the stack to be removed\");i&&1===i.state&&await i.init(this.el),this.postViewInit(i,t,e);const n=(e.enteringRequiresTransition||e.leavingRequiresTransition)&&i!==t;n&&e.opts&&t&&(\"back\"===e.opts.direction&&(e.opts.animationBuilder=e.opts.animationBuilder||i&&i.animationBuilder),t.animationBuilder=e.opts.animationBuilder);const s=n?await this.transition(i,t,e):{hasCompleted:!0,requiresTransition:!1};this.success(s,e),this.ionNavDidChange.emit()}catch(t){this.failed(t,e)}this.isTransitioning=!1,this.nextTrns()}prepareTI(e){const t=this.views.length;if(e.opts=e.opts||{},void 0===e.opts.delegate&&(e.opts.delegate=this.delegate),void 0!==e.removeView){Object(o.l)(void 0!==e.removeStart,\"removeView needs removeStart\"),Object(o.l)(void 0!==e.removeCount,\"removeView needs removeCount\");const t=this.views.indexOf(e.removeView);if(t<0)throw new Error(\"removeView was not found\");e.removeStart+=t}void 0!==e.removeStart&&(e.removeStart<0&&(e.removeStart=t-1),e.removeCount<0&&(e.removeCount=t-e.removeStart),e.leavingRequiresTransition=e.removeCount>0&&e.removeStart+e.removeCount===t),e.insertViews&&((e.insertStart<0||e.insertStart>t)&&(e.insertStart=t),e.enteringRequiresTransition=e.insertStart===t);const i=e.insertViews;if(!i)return;Object(o.l)(i.length>0,\"length can not be zero\");const n=i.map(e=>e instanceof h?e:\"component\"in e?u(e.component,null===e.componentProps?void 0:e.componentProps):u(e,void 0)).filter(e=>null!==e);if(0===n.length)throw new Error(\"invalid views to insert\");for(const s of n){s.delegate=e.opts.delegate;const t=s.nav;if(t&&t!==this)throw new Error(\"inserted view was already inserted\");if(3===s.state)throw new Error(\"inserted view was already destroyed\")}e.insertViews=n}getEnteringView(e,t){const i=e.insertViews;if(void 0!==i)return i[i.length-1];const n=e.removeStart;if(void 0!==n){const i=this.views,s=n+e.removeCount;for(let e=i.length-1;e>=0;e--){const o=i[e];if((e<n||e>=s)&&o!==t)return o}}}postViewInit(e,t,i){Object(o.l)(t||e,\"Both leavingView and enteringView are null\"),Object(o.l)(i.resolve,\"resolve must be valid\"),Object(o.l)(i.reject,\"reject must be valid\");const n=i.opts,s=i.insertViews,a=i.removeStart,c=i.removeCount;let h;if(void 0!==a&&void 0!==c){Object(o.l)(a>=0,\"removeStart can not be negative\"),Object(o.l)(c>=0,\"removeCount can not be negative\"),h=[];for(let i=0;i<c;i++){const n=this.views[i+a];n&&n!==e&&n!==t&&h.push(n)}n.direction=n.direction||\"back\"}const l=this.views.length+(void 0!==s?s.length:0)-(void 0!==c?c:0);if(Object(o.l)(l>=0,\"final balance can not be negative\"),0===l)throw console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\",this,this.el),new Error(\"navigation stack needs at least one root page\");if(s){let e=i.insertStart;for(const t of s)this.insertViewAt(t,e),e++;i.enteringRequiresTransition&&(n.direction=n.direction||\"forward\")}if(h&&h.length>0){for(const e of h)Object(r.h)(e.element,r.c),Object(r.h)(e.element,r.d),Object(r.h)(e.element,r.e);for(const e of h)this.destroyView(e)}}async transition(e,t,i){const n=i.opts,o=n.progressAnimation?e=>this.sbAni=e:void 0,a=Object(s.b)(this),c=e.element,h=t&&t.element,l=Object.assign({mode:a,showGoBack:this.canGoBackSync(e),baseEl:this.el,animationBuilder:this.animation||n.animationBuilder||s.c.get(\"navAnimation\"),progressCallback:o,animated:this.animated&&s.c.getBoolean(\"animated\",!0),enteringEl:c,leavingEl:h},n),{hasCompleted:u}=await Object(r.j)(l);return this.transitionFinish(u,e,t,n)}transitionFinish(e,t,i,n){const s=e?t:i;return s&&this.cleanup(s),{hasCompleted:e,requiresTransition:!0,enteringView:t,leavingView:i,direction:n.direction}}insertViewAt(e,t){const i=this.views,n=i.indexOf(e);n>-1?(Object(o.l)(e.nav===this,\"view is not part of the nav\"),i.splice(t,0,i.splice(n,1)[0])):(Object(o.l)(!e.nav,\"nav is used\"),e.nav=this,i.splice(t,0,e))}removeView(e){Object(o.l)(2===e.state||3===e.state,\"view state should be loaded or destroyed\");const t=this.views,i=t.indexOf(e);Object(o.l)(i>-1,\"view must be part of the stack\"),i>=0&&t.splice(i,1)}destroyView(e){e._destroy(),this.removeView(e)}cleanup(e){if(this.destroyed)return;const t=this.views,i=t.indexOf(e);for(let n=t.length-1;n>=0;n--){const e=t[n],s=e.element;s&&(n>i?(Object(r.h)(s,r.e),this.destroyView(e)):n<i&&Object(r.i)(s,!0))}}canStart(){return!!this.swipeGesture&&!this.isTransitioning&&0===this.transInstr.length&&this.animationEnabled&&this.canGoBackSync()}onStart(){this.queueTrns({removeStart:-1,removeCount:1,opts:{direction:\"back\",progressAnimation:!0}},void 0)}onMove(e){this.sbAni&&this.sbAni.progressStep(e)}onEnd(e,t,i){if(this.sbAni){this.animationEnabled=!1,this.sbAni.onFinish(()=>{this.animationEnabled=!0},{oneTimeCallback:!0});let n=e?-.001:.001;e?n+=Object(a.a)([0,0],[.32,.72],[0,1],[1,1],t)[0]:(this.sbAni.easing(\"cubic-bezier(1, 0, 0.68, 0.28)\"),n+=Object(a.a)([0,0],[1,0],[.68,.28],[1,1],t)[0]),this.sbAni.progressEnd(e?1:0,n,i)}}render(){return Object(n.j)(\"slot\",null)}get el(){return Object(n.k)(this)}static get watchers(){return{swipeGesture:[\"swipeGestureChanged\"],root:[\"rootChanged\"]}}};d.style=\":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";const v=class{constructor(e){Object(n.o)(this,e),this.routerDirection=\"forward\",this.onClick=()=>((e,t,i,n,s)=>{const o=this.el.closest(\"ion-nav\");if(o)if(\"forward\"===t){if(void 0!==i)return o.push(i,n,{skipIfBusy:!0,animationBuilder:s})}else if(\"root\"===t){if(void 0!==i)return o.setRoot(i,n,{skipIfBusy:!0,animationBuilder:s})}else if(\"back\"===t)return o.pop({skipIfBusy:!0,animationBuilder:s});return Promise.resolve(!1)})(0,this.routerDirection,this.component,this.componentProps,this.routerAnimation)}render(){return Object(n.j)(n.c,{onClick:this.onClick})}get el(){return Object(n.k)(this)}}}}]);","name":"37.51b38ad27a36e20f19e2.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[37],{\n\n/***/ \"vnES\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_nav\", function() { return Nav; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_nav_link\", function() { return NavLink; });\n/* harmony import */ var _index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"2atR\");\n/* harmony import */ var _ionic_global_ddef3a45_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"GTku\");\n/* harmony import */ var _helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"Ke8Y\");\n/* harmony import */ var _index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"V2OV\");\n/* harmony import */ var _cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"bC4P\");\n/* harmony import */ var _framework_delegate_bda125fb_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"A2gu\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n  constructor(component, params) {\r\n    this.component = component;\r\n    this.params = params;\r\n    this.state = VIEW_STATE_NEW;\r\n  }\r\n  async init(container) {\r\n    this.state = VIEW_STATE_ATTACHED;\r\n    if (!this.element) {\r\n      const component = this.component;\r\n      this.element = await Object(_framework_delegate_bda125fb_js__WEBPACK_IMPORTED_MODULE_5__[\"a\"])(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n    }\r\n  }\r\n  /**\r\n   * DOM WRITE\r\n   */\r\n  _destroy() {\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n    const element = this.element;\r\n    if (element) {\r\n      if (this.delegate) {\r\n        this.delegate.removeViewFromDom(element.parentElement, element);\r\n      }\r\n      else {\r\n        element.remove();\r\n      }\r\n    }\r\n    this.nav = undefined;\r\n    this.state = VIEW_STATE_DESTROYED;\r\n  }\r\n}\r\nconst matches = (view, id, params) => {\r\n  if (!view) {\r\n    return false;\r\n  }\r\n  if (view.component !== id) {\r\n    return false;\r\n  }\r\n  const currentParams = view.params;\r\n  if (currentParams === params) {\r\n    return true;\r\n  }\r\n  if (!currentParams && !params) {\r\n    return true;\r\n  }\r\n  if (!currentParams || !params) {\r\n    return false;\r\n  }\r\n  const keysA = Object.keys(currentParams);\r\n  const keysB = Object.keys(params);\r\n  if (keysA.length !== keysB.length) {\r\n    return false;\r\n  }\r\n  // Test for A's keys different from B.\r\n  for (const key of keysA) {\r\n    if (currentParams[key] !== params[key]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nconst convertToView = (page, params) => {\r\n  if (!page) {\r\n    return null;\r\n  }\r\n  if (page instanceof ViewController) {\r\n    return page;\r\n  }\r\n  return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n  return pages.map(page => {\r\n    if (page instanceof ViewController) {\r\n      return page;\r\n    }\r\n    if ('component' in page) {\r\n      /**\r\n       * TODO Ionic 6:\r\n       * Consider switching to just using `undefined` here\r\n       * as well as on the public interfaces and on\r\n       * `NavComponentWithProps`. Previously `pages` was\r\n       * of type `any[]` so TypeScript did not catch this.\r\n       */\r\n      return convertToView(page.component, (page.componentProps === null) ? undefined : page.componentProps);\r\n    }\r\n    return convertToView(page, undefined);\r\n  }).filter(v => v !== null);\r\n};\r\n\r\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\r\n\r\nconst Nav = class {\r\n  constructor(hostRef) {\r\n    Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"o\"])(this, hostRef);\r\n    this.ionNavWillLoad = Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionNavWillLoad\", 7);\r\n    this.ionNavWillChange = Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionNavWillChange\", 3);\r\n    this.ionNavDidChange = Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionNavDidChange\", 3);\r\n    this.transInstr = [];\r\n    this.animationEnabled = true;\r\n    this.useRouter = false;\r\n    this.isTransitioning = false;\r\n    this.destroyed = false;\r\n    this.views = [];\r\n    /**\r\n     * If `true`, the nav should animate the transition of components.\r\n     */\r\n    this.animated = true;\r\n  }\r\n  swipeGestureChanged() {\r\n    if (this.gesture) {\r\n      this.gesture.enable(this.swipeGesture === true);\r\n    }\r\n  }\r\n  rootChanged() {\r\n    if (this.root !== undefined) {\r\n      if (!this.useRouter) {\r\n        this.setRoot(this.root, this.rootParams);\r\n      }\r\n    }\r\n  }\r\n  componentWillLoad() {\r\n    this.useRouter =\r\n      !!document.querySelector('ion-router') &&\r\n        !this.el.closest('[no-router]');\r\n    if (this.swipeGesture === undefined) {\r\n      const mode = Object(_ionic_global_ddef3a45_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"])(this);\r\n      this.swipeGesture = _ionic_global_ddef3a45_js__WEBPACK_IMPORTED_MODULE_1__[\"c\"].getBoolean('swipeBackEnabled', mode === 'ios');\r\n    }\r\n    this.ionNavWillLoad.emit();\r\n  }\r\n  async componentDidLoad() {\r\n    this.rootChanged();\r\n    this.gesture = (await __webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, \"qyRl\"))).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n    this.swipeGestureChanged();\r\n  }\r\n  disconnectedCallback() {\r\n    for (const view of this.views) {\r\n      Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* l */ \"h\"])(view.element, _index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* d */ \"e\"]);\r\n      view._destroy();\r\n    }\r\n    if (this.gesture) {\r\n      this.gesture.destroy();\r\n      this.gesture = undefined;\r\n    }\r\n    // release swipe back gesture and transition\r\n    this.transInstr.length = this.views.length = 0;\r\n    this.destroyed = true;\r\n  }\r\n  /**\r\n   * Push a new component onto the current navigation stack. Pass any additional\r\n   * information along as an object. This additional information is accessible\r\n   * through NavParams.\r\n   *\r\n   * @param component The component to push onto the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  push(component, componentProps, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: -1,\r\n      insertViews: [{ component, componentProps }],\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Inserts a component into the navigation stack at the specified index.\r\n   * This is useful to add a component at any point in the navigation stack.\r\n   *\r\n   * @param insertIndex The index to insert the component at in the stack.\r\n   * @param component The component to insert into the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  insert(insertIndex, component, componentProps, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: insertIndex,\r\n      insertViews: [{ component, componentProps }],\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Inserts an array of components into the navigation stack at the specified index.\r\n   * The last component in the array will become instantiated as a view, and animate\r\n   * in to become the active view.\r\n   *\r\n   * @param insertIndex The index to insert the components at in the stack.\r\n   * @param insertComponents The components to insert into the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  insertPages(insertIndex, insertComponents, opts, done) {\r\n    return this.queueTrns({\r\n      insertStart: insertIndex,\r\n      insertViews: insertComponents,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Pop a component off of the navigation stack. Navigates back from the current\r\n   * component.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  pop(opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: -1,\r\n      removeCount: 1,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Pop to a specific index in the navigation stack.\r\n   *\r\n   * @param indexOrViewCtrl The index or view controller to pop to.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  popTo(indexOrViewCtrl, opts, done) {\r\n    const tiConfig = {\r\n      removeStart: -1,\r\n      removeCount: -1,\r\n      opts\r\n    };\r\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n      tiConfig.removeView = indexOrViewCtrl;\r\n      tiConfig.removeStart = 1;\r\n    }\r\n    else if (typeof indexOrViewCtrl === 'number') {\r\n      tiConfig.removeStart = indexOrViewCtrl + 1;\r\n    }\r\n    return this.queueTrns(tiConfig, done);\r\n  }\r\n  /**\r\n   * Navigate back to the root of the stack, no matter how far back that is.\r\n   *\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  popToRoot(opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: 1,\r\n      removeCount: -1,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Removes a component from the navigation stack at the specified index.\r\n   *\r\n   * @param startIndex The number to begin removal at.\r\n   * @param removeCount The number of components to remove.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  removeIndex(startIndex, removeCount = 1, opts, done) {\r\n    return this.queueTrns({\r\n      removeStart: startIndex,\r\n      removeCount,\r\n      opts\r\n    }, done);\r\n  }\r\n  /**\r\n   * Set the root for the current navigation stack to a component.\r\n   *\r\n   * @param component The component to set as the root of the navigation stack.\r\n   * @param componentProps Any properties of the component.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  setRoot(component, componentProps, opts, done) {\r\n    return this.setPages([{ component, componentProps }], opts, done);\r\n  }\r\n  /**\r\n   * Set the views of the current navigation stack and navigate to the last view.\r\n   * By default animations are disabled, but they can be enabled by passing options\r\n   * to the navigation controller. Navigation parameters can also be passed to the\r\n   * individual pages in the array.\r\n   *\r\n   * @param views The list of views to set as the navigation stack.\r\n   * @param opts The navigation options.\r\n   * @param done The transition complete function.\r\n   */\r\n  setPages(views, opts, done) {\r\n    if (opts == null) {\r\n      opts = {};\r\n    }\r\n    // if animation wasn't set to true then default it to NOT animate\r\n    if (opts.animated !== true) {\r\n      opts.animated = false;\r\n    }\r\n    return this.queueTrns({\r\n      insertStart: 0,\r\n      insertViews: views,\r\n      removeStart: 0,\r\n      removeCount: -1,\r\n      opts\r\n    }, done);\r\n  }\r\n  /** @internal */\r\n  setRouteId(id, params, direction, animation) {\r\n    const active = this.getActiveSync();\r\n    if (matches(active, id, params)) {\r\n      return Promise.resolve({\r\n        changed: false,\r\n        element: active.element\r\n      });\r\n    }\r\n    let resolve;\r\n    const promise = new Promise(r => (resolve = r));\r\n    let finish;\r\n    const commonOpts = {\r\n      updateURL: false,\r\n      viewIsReady: enteringEl => {\r\n        let mark;\r\n        const p = new Promise(r => (mark = r));\r\n        resolve({\r\n          changed: true,\r\n          element: enteringEl,\r\n          markVisible: async () => {\r\n            mark();\r\n            await finish;\r\n          }\r\n        });\r\n        return p;\r\n      }\r\n    };\r\n    if (direction === 'root') {\r\n      finish = this.setRoot(id, params, commonOpts);\r\n    }\r\n    else {\r\n      const viewController = this.views.find(v => matches(v, id, params));\r\n      if (viewController) {\r\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\r\n      }\r\n      else if (direction === 'forward') {\r\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\r\n      }\r\n      else if (direction === 'back') {\r\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\r\n      }\r\n    }\r\n    return promise;\r\n  }\r\n  /** @internal */\r\n  async getRouteId() {\r\n    const active = this.getActiveSync();\r\n    return active\r\n      ? {\r\n        id: active.element.tagName,\r\n        params: active.params,\r\n        element: active.element\r\n      }\r\n      : undefined;\r\n  }\r\n  /**\r\n   * Get the active view.\r\n   */\r\n  getActive() {\r\n    return Promise.resolve(this.getActiveSync());\r\n  }\r\n  /**\r\n   * Get the view at the specified index.\r\n   *\r\n   * @param index The index of the view.\r\n   */\r\n  getByIndex(index) {\r\n    return Promise.resolve(this.views[index]);\r\n  }\r\n  /**\r\n   * Returns `true` if the current view can go back.\r\n   *\r\n   * @param view The view to check.\r\n   */\r\n  canGoBack(view) {\r\n    return Promise.resolve(this.canGoBackSync(view));\r\n  }\r\n  /**\r\n   * Get the previous view.\r\n   *\r\n   * @param view The view to get.\r\n   */\r\n  getPrevious(view) {\r\n    return Promise.resolve(this.getPreviousSync(view));\r\n  }\r\n  getLength() {\r\n    return this.views.length;\r\n  }\r\n  getActiveSync() {\r\n    return this.views[this.views.length - 1];\r\n  }\r\n  canGoBackSync(view = this.getActiveSync()) {\r\n    return !!(view && this.getPreviousSync(view));\r\n  }\r\n  getPreviousSync(view = this.getActiveSync()) {\r\n    if (!view) {\r\n      return undefined;\r\n    }\r\n    const views = this.views;\r\n    const index = views.indexOf(view);\r\n    return index > 0 ? views[index - 1] : undefined;\r\n  }\r\n  // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\r\n  // 1. _nextTrns(): consumes the next transition in the queue\r\n  // 2. _viewInit(): initializes enteringView if required\r\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\r\n  // 4. _postViewInit(): add/remove the views from the navigation stack\r\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\r\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\r\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\r\n  // 8. _transitionFinish(): called once the transition finishes\r\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\r\n  async queueTrns(ti, done) {\r\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\r\n      return Promise.resolve(false);\r\n    }\r\n    const promise = new Promise((resolve, reject) => {\r\n      ti.resolve = resolve;\r\n      ti.reject = reject;\r\n    });\r\n    ti.done = done;\r\n    /**\r\n     * If using router, check to see if navigation hooks\r\n     * will allow us to perform this transition. This\r\n     * is required in order for hooks to work with\r\n     * the ion-back-button or swipe to go back.\r\n     */\r\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\r\n      const router = document.querySelector('ion-router');\r\n      if (router) {\r\n        const canTransition = await router.canTransition();\r\n        if (canTransition === false) {\r\n          return Promise.resolve(false);\r\n        }\r\n        else if (typeof canTransition === 'string') {\r\n          router.push(canTransition, ti.opts.direction || 'back');\r\n          return Promise.resolve(false);\r\n        }\r\n      }\r\n    }\r\n    // Normalize empty\r\n    if (ti.insertViews && ti.insertViews.length === 0) {\r\n      ti.insertViews = undefined;\r\n    }\r\n    // Enqueue transition instruction\r\n    this.transInstr.push(ti);\r\n    // if there isn't a transition already happening\r\n    // then this will kick off this transition\r\n    this.nextTrns();\r\n    return promise;\r\n  }\r\n  success(result, ti) {\r\n    if (this.destroyed) {\r\n      this.fireError('nav controller was destroyed', ti);\r\n      return;\r\n    }\r\n    if (ti.done) {\r\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n    }\r\n    ti.resolve(result.hasCompleted);\r\n    if (ti.opts.updateURL !== false && this.useRouter) {\r\n      const router = document.querySelector('ion-router');\r\n      if (router) {\r\n        const direction = result.direction === 'back' ? 'back' : 'forward';\r\n        router.navChanged(direction);\r\n      }\r\n    }\r\n  }\r\n  failed(rejectReason, ti) {\r\n    if (this.destroyed) {\r\n      this.fireError('nav controller was destroyed', ti);\r\n      return;\r\n    }\r\n    this.transInstr.length = 0;\r\n    this.fireError(rejectReason, ti);\r\n  }\r\n  fireError(rejectReason, ti) {\r\n    if (ti.done) {\r\n      ti.done(false, false, rejectReason);\r\n    }\r\n    if (ti.reject && !this.destroyed) {\r\n      ti.reject(rejectReason);\r\n    }\r\n    else {\r\n      ti.resolve(false);\r\n    }\r\n  }\r\n  nextTrns() {\r\n    // this is the framework's bread 'n butta function\r\n    // only one transition is allowed at any given time\r\n    if (this.isTransitioning) {\r\n      return false;\r\n    }\r\n    // there is no transition happening right now\r\n    // get the next instruction\r\n    const ti = this.transInstr.shift();\r\n    if (!ti) {\r\n      return false;\r\n    }\r\n    this.runTransition(ti);\r\n    return true;\r\n  }\r\n  async runTransition(ti) {\r\n    try {\r\n      // set that this nav is actively transitioning\r\n      this.ionNavWillChange.emit();\r\n      this.isTransitioning = true;\r\n      this.prepareTI(ti);\r\n      const leavingView = this.getActiveSync();\r\n      const enteringView = this.getEnteringView(ti, leavingView);\r\n      if (!leavingView && !enteringView) {\r\n        throw new Error('no views in the stack to be removed');\r\n      }\r\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\r\n        await enteringView.init(this.el);\r\n      }\r\n      this.postViewInit(enteringView, leavingView, ti);\r\n      // Needs transition?\r\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\r\n        enteringView !== leavingView;\r\n      if (requiresTransition && ti.opts && leavingView) {\r\n        const isBackDirection = ti.opts.direction === 'back';\r\n        /**\r\n         * If heading back, use the entering page's animation\r\n         * unless otherwise specified by the developer.\r\n         */\r\n        if (isBackDirection) {\r\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\r\n        }\r\n        leavingView.animationBuilder = ti.opts.animationBuilder;\r\n      }\r\n      const result = requiresTransition\r\n        ? await this.transition(enteringView, leavingView, ti)\r\n        : {\r\n          // transition is not required, so we are already done!\r\n          // they're inserting/removing the views somewhere in the middle or\r\n          // beginning, so visually nothing needs to animate/transition\r\n          // resolve immediately because there's no animation that's happening\r\n          hasCompleted: true,\r\n          requiresTransition: false\r\n        };\r\n      this.success(result, ti);\r\n      this.ionNavDidChange.emit();\r\n    }\r\n    catch (rejectReason) {\r\n      this.failed(rejectReason, ti);\r\n    }\r\n    this.isTransitioning = false;\r\n    this.nextTrns();\r\n  }\r\n  prepareTI(ti) {\r\n    const viewsLength = this.views.length;\r\n    ti.opts = ti.opts || {};\r\n    if (ti.opts.delegate === undefined) {\r\n      ti.opts.delegate = this.delegate;\r\n    }\r\n    if (ti.removeView !== undefined) {\r\n      Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n      Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n      const index = this.views.indexOf(ti.removeView);\r\n      if (index < 0) {\r\n        throw new Error('removeView was not found');\r\n      }\r\n      ti.removeStart += index;\r\n    }\r\n    if (ti.removeStart !== undefined) {\r\n      if (ti.removeStart < 0) {\r\n        ti.removeStart = viewsLength - 1;\r\n      }\r\n      if (ti.removeCount < 0) {\r\n        ti.removeCount = viewsLength - ti.removeStart;\r\n      }\r\n      ti.leavingRequiresTransition =\r\n        ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n    }\r\n    if (ti.insertViews) {\r\n      // allow -1 to be passed in to auto push it on the end\r\n      // and clean up the index if it's larger then the size of the stack\r\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n        ti.insertStart = viewsLength;\r\n      }\r\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n    }\r\n    const insertViews = ti.insertViews;\r\n    if (!insertViews) {\r\n      return;\r\n    }\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(insertViews.length > 0, 'length can not be zero');\r\n    const viewControllers = convertToViews(insertViews);\r\n    if (viewControllers.length === 0) {\r\n      throw new Error('invalid views to insert');\r\n    }\r\n    // Check all the inserted view are correct\r\n    for (const view of viewControllers) {\r\n      view.delegate = ti.opts.delegate;\r\n      const nav = view.nav;\r\n      if (nav && nav !== this) {\r\n        throw new Error('inserted view was already inserted');\r\n      }\r\n      if (view.state === VIEW_STATE_DESTROYED) {\r\n        throw new Error('inserted view was already destroyed');\r\n      }\r\n    }\r\n    ti.insertViews = viewControllers;\r\n  }\r\n  getEnteringView(ti, leavingView) {\r\n    const insertViews = ti.insertViews;\r\n    if (insertViews !== undefined) {\r\n      // grab the very last view of the views to be inserted\r\n      // and initialize it as the new entering view\r\n      return insertViews[insertViews.length - 1];\r\n    }\r\n    const removeStart = ti.removeStart;\r\n    if (removeStart !== undefined) {\r\n      const views = this.views;\r\n      const removeEnd = removeStart + ti.removeCount;\r\n      for (let i = views.length - 1; i >= 0; i--) {\r\n        const view = views[i];\r\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n          return view;\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  postViewInit(enteringView, leavingView, ti) {\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(ti.resolve, 'resolve must be valid');\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(ti.reject, 'reject must be valid');\r\n    const opts = ti.opts;\r\n    const insertViews = ti.insertViews;\r\n    const removeStart = ti.removeStart;\r\n    const removeCount = ti.removeCount;\r\n    let destroyQueue;\r\n    // there are views to remove\r\n    if (removeStart !== undefined && removeCount !== undefined) {\r\n      Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(removeStart >= 0, 'removeStart can not be negative');\r\n      Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(removeCount >= 0, 'removeCount can not be negative');\r\n      destroyQueue = [];\r\n      for (let i = 0; i < removeCount; i++) {\r\n        const view = this.views[i + removeStart];\r\n        if (view && view !== enteringView && view !== leavingView) {\r\n          destroyQueue.push(view);\r\n        }\r\n      }\r\n      // default the direction to \"back\"\r\n      opts.direction = opts.direction || 'back';\r\n    }\r\n    const finalBalance = this.views.length +\r\n      (insertViews !== undefined ? insertViews.length : 0) -\r\n      (removeCount !== undefined ? removeCount : 0);\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(finalBalance >= 0, 'final balance can not be negative');\r\n    if (finalBalance === 0) {\r\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\r\n      throw new Error('navigation stack needs at least one root page');\r\n    }\r\n    // At this point the transition can not be rejected, any throw should be an error\r\n    // there are views to insert\r\n    if (insertViews) {\r\n      // add the views to the\r\n      let insertIndex = ti.insertStart;\r\n      for (const view of insertViews) {\r\n        this.insertViewAt(view, insertIndex);\r\n        insertIndex++;\r\n      }\r\n      if (ti.enteringRequiresTransition) {\r\n        // default to forward if not already set\r\n        opts.direction = opts.direction || 'forward';\r\n      }\r\n    }\r\n    // if the views to be removed are in the beginning or middle\r\n    // and there is not a view that needs to visually transition out\r\n    // then just destroy them and don't transition anything\r\n    // batch all of lifecycles together\r\n    // let's make sure, callbacks are zoned\r\n    if (destroyQueue && destroyQueue.length > 0) {\r\n      for (const view of destroyQueue) {\r\n        Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* l */ \"h\"])(view.element, _index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* b */ \"c\"]);\r\n        Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* l */ \"h\"])(view.element, _index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* c */ \"d\"]);\r\n        Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* l */ \"h\"])(view.element, _index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* d */ \"e\"]);\r\n      }\r\n      // once all lifecycle events has been delivered, we can safely detroy the views\r\n      for (const view of destroyQueue) {\r\n        this.destroyView(view);\r\n      }\r\n    }\r\n  }\r\n  async transition(enteringView, leavingView, ti) {\r\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\r\n    // or if it is a portal (modal, actionsheet, etc.)\r\n    const opts = ti.opts;\r\n    const progressCallback = opts.progressAnimation\r\n      ? (ani) => this.sbAni = ani\r\n      : undefined;\r\n    const mode = Object(_ionic_global_ddef3a45_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"])(this);\r\n    const enteringEl = enteringView.element;\r\n    const leavingEl = leavingView && leavingView.element;\r\n    const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || _ionic_global_ddef3a45_js__WEBPACK_IMPORTED_MODULE_1__[\"c\"].get('navAnimation'), progressCallback, animated: this.animated && _ionic_global_ddef3a45_js__WEBPACK_IMPORTED_MODULE_1__[\"c\"].getBoolean('animated', true), enteringEl,\r\n      leavingEl }, opts);\r\n    const { hasCompleted } = await Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* t */ \"j\"])(animationOpts);\r\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\r\n  }\r\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\r\n    const cleanupView = hasCompleted ? enteringView : leavingView;\r\n    if (cleanupView) {\r\n      this.cleanup(cleanupView);\r\n    }\r\n    return {\r\n      hasCompleted,\r\n      requiresTransition: true,\r\n      enteringView,\r\n      leavingView,\r\n      direction: opts.direction\r\n    };\r\n  }\r\n  insertViewAt(view, index) {\r\n    const views = this.views;\r\n    const existingIndex = views.indexOf(view);\r\n    if (existingIndex > -1) {\r\n      // this view is already in the stack!!\r\n      // move it to its new location\r\n      Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(view.nav === this, 'view is not part of the nav');\r\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\r\n    }\r\n    else {\r\n      Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(!view.nav, 'nav is used');\r\n      // this is a new view to add to the stack\r\n      // create the new entering view\r\n      view.nav = this;\r\n      // insert the entering view into the correct index in the stack\r\n      views.splice(index, 0, view);\r\n    }\r\n  }\r\n  removeView(view) {\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n    const views = this.views;\r\n    const index = views.indexOf(view);\r\n    Object(_helpers_cf6e85ee_js__WEBPACK_IMPORTED_MODULE_2__[\"l\"])(index > -1, 'view must be part of the stack');\r\n    if (index >= 0) {\r\n      views.splice(index, 1);\r\n    }\r\n  }\r\n  destroyView(view) {\r\n    view._destroy();\r\n    this.removeView(view);\r\n  }\r\n  /**\r\n   * DOM WRITE\r\n   */\r\n  cleanup(activeView) {\r\n    // ok, cleanup time!! Destroy all of the views that are\r\n    // INACTIVE and come after the active view\r\n    // only do this if the views exist, though\r\n    if (this.destroyed) {\r\n      return;\r\n    }\r\n    const views = this.views;\r\n    const activeViewIndex = views.indexOf(activeView);\r\n    for (let i = views.length - 1; i >= 0; i--) {\r\n      const view = views[i];\r\n      /**\r\n       * When inserting multiple views via insertPages\r\n       * the last page will be transitioned to, but the\r\n       * others will not be. As a result, a DOM element\r\n       * will only be created for the last page inserted.\r\n       * As a result, it is possible to have views in the\r\n       * stack that do not have `view.element` yet.\r\n       */\r\n      const element = view.element;\r\n      if (element) {\r\n        if (i > activeViewIndex) {\r\n          // this view comes after the active view\r\n          // let's unload it\r\n          Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* l */ \"h\"])(element, _index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* d */ \"e\"]);\r\n          this.destroyView(view);\r\n        }\r\n        else if (i < activeViewIndex) {\r\n          // this view comes before the active view\r\n          // and it is not a portal then ensure it is hidden\r\n          Object(_index_5ad3bc52_js__WEBPACK_IMPORTED_MODULE_3__[/* s */ \"i\"])(element, true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!!this.swipeGesture &&\r\n      !this.isTransitioning &&\r\n      this.transInstr.length === 0 &&\r\n      this.animationEnabled &&\r\n      this.canGoBackSync());\r\n  }\r\n  onStart() {\r\n    this.queueTrns({\r\n      removeStart: -1,\r\n      removeCount: 1,\r\n      opts: {\r\n        direction: 'back',\r\n        progressAnimation: true\r\n      }\r\n    }, undefined);\r\n  }\r\n  onMove(stepValue) {\r\n    if (this.sbAni) {\r\n      this.sbAni.progressStep(stepValue);\r\n    }\r\n  }\r\n  onEnd(shouldComplete, stepValue, dur) {\r\n    if (this.sbAni) {\r\n      this.animationEnabled = false;\r\n      this.sbAni.onFinish(() => {\r\n        this.animationEnabled = true;\r\n      }, { oneTimeCallback: true });\r\n      // Account for rounding errors in JS\r\n      let newStepValue = (shouldComplete) ? -0.001 : 0.001;\r\n      /**\r\n       * Animation will be reversed here, so need to\r\n       * reverse the easing curve as well\r\n       *\r\n       * Additionally, we need to account for the time relative\r\n       * to the new easing curve, as `stepValue` is going to be given\r\n       * in terms of a linear curve.\r\n       */\r\n      if (!shouldComplete) {\r\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\r\n        newStepValue += Object(_cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_4__[/* g */ \"a\"])([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\r\n      }\r\n      else {\r\n        newStepValue += Object(_cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_4__[/* g */ \"a\"])([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\r\n      }\r\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\r\n    }\r\n  }\r\n  render() {\r\n    return (Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"j\"])(\"slot\", null));\r\n  }\r\n  get el() { return Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* i */ \"k\"])(this); }\r\n  static get watchers() { return {\r\n    \"swipeGesture\": [\"swipeGestureChanged\"],\r\n    \"root\": [\"rootChanged\"]\r\n  }; }\r\n};\r\nNav.style = navCss;\r\n\r\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\r\n  const nav = el.closest('ion-nav');\r\n  if (nav) {\r\n    if (routerDirection === 'forward') {\r\n      if (component !== undefined) {\r\n        return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\r\n      }\r\n    }\r\n    else if (routerDirection === 'root') {\r\n      if (component !== undefined) {\r\n        return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\r\n      }\r\n    }\r\n    else if (routerDirection === 'back') {\r\n      return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\r\n    }\r\n  }\r\n  return Promise.resolve(false);\r\n};\r\n\r\nconst NavLink = class {\r\n  constructor(hostRef) {\r\n    Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"o\"])(this, hostRef);\r\n    /**\r\n     * The transition direction when navigating to another page.\r\n     */\r\n    this.routerDirection = 'forward';\r\n    this.onClick = () => {\r\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\r\n    };\r\n  }\r\n  render() {\r\n    return (Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"j\"])(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* H */ \"c\"], { onClick: this.onClick }));\r\n  }\r\n  get el() { return Object(_index_3ccd7557_js__WEBPACK_IMPORTED_MODULE_0__[/* i */ \"k\"])(this); }\r\n};\r\n\r\n\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}