var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var AdMobProOriginal = /** @class */ (function (_super) {
    __extends(AdMobProOriginal, _super);
    function AdMobProOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AD_POSITION = {
            NO_CHANGE: 0,
            TOP_LEFT: 1,
            TOP_CENTER: 2,
            TOP_RIGHT: 3,
            LEFT: 4,
            CENTER: 5,
            RIGHT: 6,
            BOTTOM_LEFT: 7,
            BOTTOM_CENTER: 8,
            BOTTOM_RIGHT: 9,
            POS_XY: 10,
        };
        return _this;
    }
    AdMobProOriginal.prototype.createBanner = function (adIdOrOptions) { return cordova(this, "createBanner", {}, arguments); };
    AdMobProOriginal.prototype.removeBanner = function () { return cordova(this, "removeBanner", { "sync": true }, arguments); };
    AdMobProOriginal.prototype.showBanner = function (position) { return cordova(this, "showBanner", { "sync": true }, arguments); };
    AdMobProOriginal.prototype.showBannerAtXY = function (x, y) { return cordova(this, "showBannerAtXY", { "sync": true }, arguments); };
    AdMobProOriginal.prototype.hideBanner = function () { return cordova(this, "hideBanner", { "sync": true }, arguments); };
    AdMobProOriginal.prototype.prepareInterstitial = function (adIdOrOptions) { return cordova(this, "prepareInterstitial", {}, arguments); };
    AdMobProOriginal.prototype.showInterstitial = function () { return cordova(this, "showInterstitial", { "sync": true }, arguments); };
    AdMobProOriginal.prototype.prepareRewardVideoAd = function (adIdOrOptions) { return cordova(this, "prepareRewardVideoAd", {}, arguments); };
    AdMobProOriginal.prototype.showRewardVideoAd = function () { return cordova(this, "showRewardVideoAd", { "sync": true }, arguments); };
    AdMobProOriginal.prototype.setOptions = function (options) { return cordova(this, "setOptions", {}, arguments); };
    AdMobProOriginal.prototype.getAdSettings = function () { return cordova(this, "getAdSettings", {}, arguments); };
    AdMobProOriginal.prototype.onAdFailLoad = function () { return cordova(this, "onAdFailLoad", { "eventObservable": true, "event": "onAdFailLoad", "element": "document" }, arguments); };
    AdMobProOriginal.prototype.onAdLoaded = function () { return cordova(this, "onAdLoaded", { "eventObservable": true, "event": "onAdLoaded", "element": "document" }, arguments); };
    AdMobProOriginal.prototype.onAdPresent = function () { return cordova(this, "onAdPresent", { "eventObservable": true, "event": "onAdPresent", "element": "document" }, arguments); };
    AdMobProOriginal.prototype.onAdLeaveApp = function () { return cordova(this, "onAdLeaveApp", { "eventObservable": true, "event": "onAdLeaveApp", "element": "document" }, arguments); };
    AdMobProOriginal.prototype.onAdDismiss = function () { return cordova(this, "onAdDismiss", { "eventObservable": true, "event": "onAdDismiss", "element": "document" }, arguments); };
    AdMobProOriginal.pluginName = "AdMob Pro";
    AdMobProOriginal.plugin = "cordova-plugin-admobpro";
    AdMobProOriginal.pluginRef = "AdMob";
    AdMobProOriginal.repo = "https://github.com/floatinghotpot/cordova-admob-pro";
    AdMobProOriginal.platforms = ["Android", "iOS", "Windows Phone 8"];
    return AdMobProOriginal;
}(IonicNativePlugin));
var AdMobPro = new AdMobProOriginal();
export { AdMobPro };
//# sourceMappingURL=data:application/json;base64,