import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var AdMobPro = /** @class */ (function (_super) {
    __extends(AdMobPro, _super);
    function AdMobPro() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AD_POSITION = {
            NO_CHANGE: 0,
            TOP_LEFT: 1,
            TOP_CENTER: 2,
            TOP_RIGHT: 3,
            LEFT: 4,
            CENTER: 5,
            RIGHT: 6,
            BOTTOM_LEFT: 7,
            BOTTOM_CENTER: 8,
            BOTTOM_RIGHT: 9,
            POS_XY: 10,
        };
        return _this;
    }
    AdMobPro.prototype.createBanner = function (adIdOrOptions) { return cordova(this, "createBanner", {}, arguments); };
    AdMobPro.prototype.removeBanner = function () { return cordova(this, "removeBanner", { "sync": true }, arguments); };
    AdMobPro.prototype.showBanner = function (position) { return cordova(this, "showBanner", { "sync": true }, arguments); };
    AdMobPro.prototype.showBannerAtXY = function (x, y) { return cordova(this, "showBannerAtXY", { "sync": true }, arguments); };
    AdMobPro.prototype.hideBanner = function () { return cordova(this, "hideBanner", { "sync": true }, arguments); };
    AdMobPro.prototype.prepareInterstitial = function (adIdOrOptions) { return cordova(this, "prepareInterstitial", {}, arguments); };
    AdMobPro.prototype.showInterstitial = function () { return cordova(this, "showInterstitial", { "sync": true }, arguments); };
    AdMobPro.prototype.prepareRewardVideoAd = function (adIdOrOptions) { return cordova(this, "prepareRewardVideoAd", {}, arguments); };
    AdMobPro.prototype.showRewardVideoAd = function () { return cordova(this, "showRewardVideoAd", { "sync": true }, arguments); };
    AdMobPro.prototype.setOptions = function (options) { return cordova(this, "setOptions", {}, arguments); };
    AdMobPro.prototype.getAdSettings = function () { return cordova(this, "getAdSettings", {}, arguments); };
    AdMobPro.prototype.onAdFailLoad = function () { return cordova(this, "onAdFailLoad", { "eventObservable": true, "event": "onAdFailLoad", "element": "document" }, arguments); };
    AdMobPro.prototype.onAdLoaded = function () { return cordova(this, "onAdLoaded", { "eventObservable": true, "event": "onAdLoaded", "element": "document" }, arguments); };
    AdMobPro.prototype.onAdPresent = function () { return cordova(this, "onAdPresent", { "eventObservable": true, "event": "onAdPresent", "element": "document" }, arguments); };
    AdMobPro.prototype.onAdLeaveApp = function () { return cordova(this, "onAdLeaveApp", { "eventObservable": true, "event": "onAdLeaveApp", "element": "document" }, arguments); };
    AdMobPro.prototype.onAdDismiss = function () { return cordova(this, "onAdDismiss", { "eventObservable": true, "event": "onAdDismiss", "element": "document" }, arguments); };
    AdMobPro.pluginName = "AdMob Pro";
    AdMobPro.plugin = "cordova-plugin-admobpro";
    AdMobPro.pluginRef = "AdMob";
    AdMobPro.repo = "https://github.com/floatinghotpot/cordova-admob-pro";
    AdMobPro.platforms = ["Android", "iOS", "Windows Phone 8"];
    AdMobPro.decorators = [
        { type: Injectable }
    ];
    return AdMobPro;
}(IonicNativePlugin));
export { AdMobPro };
//# sourceMappingURL=data:application/json;base64,